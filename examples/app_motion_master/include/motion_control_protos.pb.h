// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: motion_control_protos.proto

#ifndef PROTOBUF_motion_5fcontrol_5fprotos_2eproto__INCLUDED
#define PROTOBUF_motion_5fcontrol_5fprotos_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace synapticon {
namespace motioncontrolprotos {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_motion_5fcontrol_5fprotos_2eproto();
void protobuf_AssignDesc_motion_5fcontrol_5fprotos_2eproto();
void protobuf_ShutdownFile_motion_5fcontrol_5fprotos_2eproto();

class MotionControl;
class Tuning;
class Pid;
class Profile;
class Play;
class Config;

enum MotionControl_Type {
  MotionControl_Type_TUNING = 0,
  MotionControl_Type_PID = 1,
  MotionControl_Type_PROFILE = 2,
  MotionControl_Type_PLAY = 3,
  MotionControl_Type_CONFIG = 4
};
bool MotionControl_Type_IsValid(int value);
const MotionControl_Type MotionControl_Type_Type_MIN = MotionControl_Type_TUNING;
const MotionControl_Type MotionControl_Type_Type_MAX = MotionControl_Type_CONFIG;
const int MotionControl_Type_Type_ARRAYSIZE = MotionControl_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* MotionControl_Type_descriptor();
inline const ::std::string& MotionControl_Type_Name(MotionControl_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    MotionControl_Type_descriptor(), value);
}
inline bool MotionControl_Type_Parse(
    const ::std::string& name, MotionControl_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MotionControl_Type>(
    MotionControl_Type_descriptor(), name, value);
}
enum Tuning_TuningCommand {
  Tuning_TuningCommand_TIMES = 0
};
bool Tuning_TuningCommand_IsValid(int value);
const Tuning_TuningCommand Tuning_TuningCommand_TuningCommand_MIN = Tuning_TuningCommand_TIMES;
const Tuning_TuningCommand Tuning_TuningCommand_TuningCommand_MAX = Tuning_TuningCommand_TIMES;
const int Tuning_TuningCommand_TuningCommand_ARRAYSIZE = Tuning_TuningCommand_TuningCommand_MAX + 1;

const ::google::protobuf::EnumDescriptor* Tuning_TuningCommand_descriptor();
inline const ::std::string& Tuning_TuningCommand_Name(Tuning_TuningCommand value) {
  return ::google::protobuf::internal::NameOfEnum(
    Tuning_TuningCommand_descriptor(), value);
}
inline bool Tuning_TuningCommand_Parse(
    const ::std::string& name, Tuning_TuningCommand* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Tuning_TuningCommand>(
    Tuning_TuningCommand_descriptor(), name, value);
}
enum Pid_PidCommand {
  Pid_PidCommand_POSITION_KP = 0,
  Pid_PidCommand_POSITION_KI = 1,
  Pid_PidCommand_POSITION_KD = 2,
  Pid_PidCommand_POSITION_TARGET = 3,
  Pid_PidCommand_POSITION_PARAMETER_VALUES = 4,
  Pid_PidCommand_VELOCITY_KP = 5,
  Pid_PidCommand_VELOCITY_KI = 6,
  Pid_PidCommand_VELOCITY_KD = 7,
  Pid_PidCommand_VELOCITY_TARGET = 8,
  Pid_PidCommand_VELOCITY_PARAMETER_VALUES = 9,
  Pid_PidCommand_TORQUE_KP = 10,
  Pid_PidCommand_TORQUE_KI = 11,
  Pid_PidCommand_TORQUE_KD = 12,
  Pid_PidCommand_TORQUE_TARGET = 13,
  Pid_PidCommand_TORQUE_PARAMETER_VALUES = 14,
  Pid_PidCommand_TIME = 15
};
bool Pid_PidCommand_IsValid(int value);
const Pid_PidCommand Pid_PidCommand_PidCommand_MIN = Pid_PidCommand_POSITION_KP;
const Pid_PidCommand Pid_PidCommand_PidCommand_MAX = Pid_PidCommand_TIME;
const int Pid_PidCommand_PidCommand_ARRAYSIZE = Pid_PidCommand_PidCommand_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pid_PidCommand_descriptor();
inline const ::std::string& Pid_PidCommand_Name(Pid_PidCommand value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pid_PidCommand_descriptor(), value);
}
inline bool Pid_PidCommand_Parse(
    const ::std::string& name, Pid_PidCommand* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pid_PidCommand>(
    Pid_PidCommand_descriptor(), name, value);
}
enum Profile_ProfileCommand {
  Profile_ProfileCommand_POSITION_TARGET = 0,
  Profile_ProfileCommand_VELOCITY_TARGET = 1,
  Profile_ProfileCommand_TORQUE_TARGET = 2,
  Profile_ProfileCommand_ACCELERATION = 3,
  Profile_ProfileCommand_DECELERATION = 4,
  Profile_ProfileCommand_TORQUE_SLOPE = 5,
  Profile_ProfileCommand_VELOCITY = 6,
  Profile_ProfileCommand_TIME = 7,
  Profile_ProfileCommand_PARAMETER_VALUES = 8
};
bool Profile_ProfileCommand_IsValid(int value);
const Profile_ProfileCommand Profile_ProfileCommand_ProfileCommand_MIN = Profile_ProfileCommand_POSITION_TARGET;
const Profile_ProfileCommand Profile_ProfileCommand_ProfileCommand_MAX = Profile_ProfileCommand_PARAMETER_VALUES;
const int Profile_ProfileCommand_ProfileCommand_ARRAYSIZE = Profile_ProfileCommand_ProfileCommand_MAX + 1;

const ::google::protobuf::EnumDescriptor* Profile_ProfileCommand_descriptor();
inline const ::std::string& Profile_ProfileCommand_Name(Profile_ProfileCommand value) {
  return ::google::protobuf::internal::NameOfEnum(
    Profile_ProfileCommand_descriptor(), value);
}
inline bool Profile_ProfileCommand_Parse(
    const ::std::string& name, Profile_ProfileCommand* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Profile_ProfileCommand>(
    Profile_ProfileCommand_descriptor(), name, value);
}
enum Play_PlayCommand {
  Play_PlayCommand_POSITION_TARGET = 0,
  Play_PlayCommand_POSITION_STOP = 1,
  Play_PlayCommand_VELOCITY_TARGET = 2,
  Play_PlayCommand_VELOCITY_STOP = 3,
  Play_PlayCommand_TORQUE_TARGET = 4,
  Play_PlayCommand_TORQUE_STOP = 5,
  Play_PlayCommand_PASSIVE_MODE = 6,
  Play_PlayCommand_ACTIVE_MODE = 7,
  Play_PlayCommand_RESET_ABSOLUTE_POSITION = 8
};
bool Play_PlayCommand_IsValid(int value);
const Play_PlayCommand Play_PlayCommand_PlayCommand_MIN = Play_PlayCommand_POSITION_TARGET;
const Play_PlayCommand Play_PlayCommand_PlayCommand_MAX = Play_PlayCommand_RESET_ABSOLUTE_POSITION;
const int Play_PlayCommand_PlayCommand_ARRAYSIZE = Play_PlayCommand_PlayCommand_MAX + 1;

const ::google::protobuf::EnumDescriptor* Play_PlayCommand_descriptor();
inline const ::std::string& Play_PlayCommand_Name(Play_PlayCommand value) {
  return ::google::protobuf::internal::NameOfEnum(
    Play_PlayCommand_descriptor(), value);
}
inline bool Play_PlayCommand_Parse(
    const ::std::string& name, Play_PlayCommand* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Play_PlayCommand>(
    Play_PlayCommand_descriptor(), name, value);
}
enum Config_ConfigCommand {
  Config_ConfigCommand_HALL_POLE_PAIRS = 0,
  Config_ConfigCommand_IE_SENSOR_RESOLUTION = 1,
  Config_ConfigCommand_IE_INDEX_TYPE = 2,
  Config_ConfigCommand_IE_SENSOR_POLARITY = 3,
  Config_ConfigCommand_IE_SIGNAL_TYPE = 4,
  Config_ConfigCommand_BISS_MULTITURN_LENGTH = 5,
  Config_ConfigCommand_BISS_MULTITURN_RESOLUTION = 6,
  Config_ConfigCommand_BISS_SINGLETURN_LENGTH = 7,
  Config_ConfigCommand_BISS_SINGLETURN_RESOLUTION = 8,
  Config_ConfigCommand_BISS_STATUS_LENGTH = 9,
  Config_ConfigCommand_BISS_CRC_POLY = 10,
  Config_ConfigCommand_BISS_POLE_PAIRS = 11,
  Config_ConfigCommand_BISS_POLARITY = 12,
  Config_ConfigCommand_BISS_CLOCK_DIVIDEND = 13,
  Config_ConfigCommand_BISS_CLOCK_DIVISOR = 14,
  Config_ConfigCommand_BISS_TIMEOUT = 15,
  Config_ConfigCommand_BISS_VELOCITY_LOOP = 16,
  Config_ConfigCommand_BISS_MAX_TICKS = 17,
  Config_ConfigCommand_BISS_OFFSET_ELECTRICAL = 18,
  Config_ConfigCommand_AMS_FACTORY_SETTINGS = 19,
  Config_ConfigCommand_AMS_POLARITY = 20,
  Config_ConfigCommand_AMS_HYSTERESIS = 21,
  Config_ConfigCommand_AMS_NOISE_SETTINGS = 22,
  Config_ConfigCommand_AMS_UVW_ABI = 23,
  Config_ConfigCommand_AMS_DYN_ANGLE_COMP = 24,
  Config_ConfigCommand_AMS_DATA_SELECT = 25,
  Config_ConfigCommand_AMS_PWM_ON = 26,
  Config_ConfigCommand_AMS_ABI_RESOLUTION = 27,
  Config_ConfigCommand_AMS_RESOLUTION_BITS = 28,
  Config_ConfigCommand_AMS_OFFSET = 29,
  Config_ConfigCommand_AMS_POLE_PAIRS = 30,
  Config_ConfigCommand_AMS_MAX_TICKS = 31,
  Config_ConfigCommand_AMS_CACHE_TIME = 32,
  Config_ConfigCommand_AMS_VELOCITY_LOOP = 33,
  Config_ConfigCommand_MOTOR_TYPE = 34,
  Config_ConfigCommand_WINDING_TYPE = 35,
  Config_ConfigCommand_COMMUTATION_SENSOR = 36,
  Config_ConfigCommand_COMMUTATION_OFFSET_CLOCKWISE = 37,
  Config_ConfigCommand_COMMUTATION_OFFSET_COUNTERCLOCKWISE = 38,
  Config_ConfigCommand_COMMUTATION_LOOP_PERIOD = 39,
  Config_ConfigCommand_FEEDBACK_SENSOR = 40,
  Config_ConfigCommand_POSITION_CONTROL_LOOP_PERIOD = 41,
  Config_ConfigCommand_POSITION_KP = 42,
  Config_ConfigCommand_POSITION_KI = 43,
  Config_ConfigCommand_POSITION_KD = 44,
  Config_ConfigCommand_VELOCITY_CONTROL_LOOP_PERIOD = 45,
  Config_ConfigCommand_VELOCITY_KP = 46,
  Config_ConfigCommand_VELOCITY_KI = 47,
  Config_ConfigCommand_VELOCITY_KD = 48,
  Config_ConfigCommand_TORQUE_CONTROL_LOOP_PERIOD = 49,
  Config_ConfigCommand_TORQUE_KP = 50,
  Config_ConfigCommand_TORQUE_KI = 51,
  Config_ConfigCommand_TORQUE_KD = 52,
  Config_ConfigCommand_PARAMETER_VALUES = 53,
  Config_ConfigCommand_SAVE = 54
};
bool Config_ConfigCommand_IsValid(int value);
const Config_ConfigCommand Config_ConfigCommand_ConfigCommand_MIN = Config_ConfigCommand_HALL_POLE_PAIRS;
const Config_ConfigCommand Config_ConfigCommand_ConfigCommand_MAX = Config_ConfigCommand_SAVE;
const int Config_ConfigCommand_ConfigCommand_ARRAYSIZE = Config_ConfigCommand_ConfigCommand_MAX + 1;

const ::google::protobuf::EnumDescriptor* Config_ConfigCommand_descriptor();
inline const ::std::string& Config_ConfigCommand_Name(Config_ConfigCommand value) {
  return ::google::protobuf::internal::NameOfEnum(
    Config_ConfigCommand_descriptor(), value);
}
inline bool Config_ConfigCommand_Parse(
    const ::std::string& name, Config_ConfigCommand* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Config_ConfigCommand>(
    Config_ConfigCommand_descriptor(), name, value);
}
// ===================================================================

class MotionControl : public ::google::protobuf::Message {
 public:
  MotionControl();
  virtual ~MotionControl();

  MotionControl(const MotionControl& from);

  inline MotionControl& operator=(const MotionControl& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MotionControl& default_instance();

  void Swap(MotionControl* other);

  // implements Message ----------------------------------------------

  MotionControl* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MotionControl& from);
  void MergeFrom(const MotionControl& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MotionControl_Type Type;
  static const Type TUNING = MotionControl_Type_TUNING;
  static const Type PID = MotionControl_Type_PID;
  static const Type PROFILE = MotionControl_Type_PROFILE;
  static const Type PLAY = MotionControl_Type_PLAY;
  static const Type CONFIG = MotionControl_Type_CONFIG;
  static inline bool Type_IsValid(int value) {
    return MotionControl_Type_IsValid(value);
  }
  static const Type Type_MIN =
    MotionControl_Type_Type_MIN;
  static const Type Type_MAX =
    MotionControl_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    MotionControl_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return MotionControl_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return MotionControl_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return MotionControl_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .com.synapticon.motioncontrolprotos.MotionControl.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::com::synapticon::motioncontrolprotos::MotionControl_Type type() const;
  inline void set_type(::com::synapticon::motioncontrolprotos::MotionControl_Type value);

  // optional .com.synapticon.motioncontrolprotos.Tuning tuning = 2;
  inline bool has_tuning() const;
  inline void clear_tuning();
  static const int kTuningFieldNumber = 2;
  inline const ::com::synapticon::motioncontrolprotos::Tuning& tuning() const;
  inline ::com::synapticon::motioncontrolprotos::Tuning* mutable_tuning();
  inline ::com::synapticon::motioncontrolprotos::Tuning* release_tuning();
  inline void set_allocated_tuning(::com::synapticon::motioncontrolprotos::Tuning* tuning);

  // optional .com.synapticon.motioncontrolprotos.Pid pid = 3;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 3;
  inline const ::com::synapticon::motioncontrolprotos::Pid& pid() const;
  inline ::com::synapticon::motioncontrolprotos::Pid* mutable_pid();
  inline ::com::synapticon::motioncontrolprotos::Pid* release_pid();
  inline void set_allocated_pid(::com::synapticon::motioncontrolprotos::Pid* pid);

  // optional .com.synapticon.motioncontrolprotos.Profile profile = 4;
  inline bool has_profile() const;
  inline void clear_profile();
  static const int kProfileFieldNumber = 4;
  inline const ::com::synapticon::motioncontrolprotos::Profile& profile() const;
  inline ::com::synapticon::motioncontrolprotos::Profile* mutable_profile();
  inline ::com::synapticon::motioncontrolprotos::Profile* release_profile();
  inline void set_allocated_profile(::com::synapticon::motioncontrolprotos::Profile* profile);

  // optional .com.synapticon.motioncontrolprotos.Play play = 5;
  inline bool has_play() const;
  inline void clear_play();
  static const int kPlayFieldNumber = 5;
  inline const ::com::synapticon::motioncontrolprotos::Play& play() const;
  inline ::com::synapticon::motioncontrolprotos::Play* mutable_play();
  inline ::com::synapticon::motioncontrolprotos::Play* release_play();
  inline void set_allocated_play(::com::synapticon::motioncontrolprotos::Play* play);

  // optional .com.synapticon.motioncontrolprotos.Config config = 6;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 6;
  inline const ::com::synapticon::motioncontrolprotos::Config& config() const;
  inline ::com::synapticon::motioncontrolprotos::Config* mutable_config();
  inline ::com::synapticon::motioncontrolprotos::Config* release_config();
  inline void set_allocated_config(::com::synapticon::motioncontrolprotos::Config* config);

  // @@protoc_insertion_point(class_scope:com.synapticon.motioncontrolprotos.MotionControl)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_tuning();
  inline void clear_has_tuning();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_profile();
  inline void clear_has_profile();
  inline void set_has_play();
  inline void clear_has_play();
  inline void set_has_config();
  inline void clear_has_config();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::com::synapticon::motioncontrolprotos::Tuning* tuning_;
  ::com::synapticon::motioncontrolprotos::Pid* pid_;
  ::com::synapticon::motioncontrolprotos::Profile* profile_;
  ::com::synapticon::motioncontrolprotos::Play* play_;
  ::com::synapticon::motioncontrolprotos::Config* config_;
  int type_;
  friend void  protobuf_AddDesc_motion_5fcontrol_5fprotos_2eproto();
  friend void protobuf_AssignDesc_motion_5fcontrol_5fprotos_2eproto();
  friend void protobuf_ShutdownFile_motion_5fcontrol_5fprotos_2eproto();

  void InitAsDefaultInstance();
  static MotionControl* default_instance_;
};
// -------------------------------------------------------------------

class Tuning : public ::google::protobuf::Message {
 public:
  Tuning();
  virtual ~Tuning();

  Tuning(const Tuning& from);

  inline Tuning& operator=(const Tuning& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Tuning& default_instance();

  void Swap(Tuning* other);

  // implements Message ----------------------------------------------

  Tuning* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Tuning& from);
  void MergeFrom(const Tuning& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Tuning_TuningCommand TuningCommand;
  static const TuningCommand TIMES = Tuning_TuningCommand_TIMES;
  static inline bool TuningCommand_IsValid(int value) {
    return Tuning_TuningCommand_IsValid(value);
  }
  static const TuningCommand TuningCommand_MIN =
    Tuning_TuningCommand_TuningCommand_MIN;
  static const TuningCommand TuningCommand_MAX =
    Tuning_TuningCommand_TuningCommand_MAX;
  static const int TuningCommand_ARRAYSIZE =
    Tuning_TuningCommand_TuningCommand_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TuningCommand_descriptor() {
    return Tuning_TuningCommand_descriptor();
  }
  static inline const ::std::string& TuningCommand_Name(TuningCommand value) {
    return Tuning_TuningCommand_Name(value);
  }
  static inline bool TuningCommand_Parse(const ::std::string& name,
      TuningCommand* value) {
    return Tuning_TuningCommand_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required .com.synapticon.motioncontrolprotos.Tuning.TuningCommand tuning_command = 2;
  inline bool has_tuning_command() const;
  inline void clear_tuning_command();
  static const int kTuningCommandFieldNumber = 2;
  inline ::com::synapticon::motioncontrolprotos::Tuning_TuningCommand tuning_command() const;
  inline void set_tuning_command(::com::synapticon::motioncontrolprotos::Tuning_TuningCommand value);

  // optional int32 parameter = 3;
  inline bool has_parameter() const;
  inline void clear_parameter();
  static const int kParameterFieldNumber = 3;
  inline ::google::protobuf::int32 parameter() const;
  inline void set_parameter(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.synapticon.motioncontrolprotos.Tuning)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_tuning_command();
  inline void clear_has_tuning_command();
  inline void set_has_parameter();
  inline void clear_has_parameter();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 index_;
  int tuning_command_;
  ::google::protobuf::int32 parameter_;
  friend void  protobuf_AddDesc_motion_5fcontrol_5fprotos_2eproto();
  friend void protobuf_AssignDesc_motion_5fcontrol_5fprotos_2eproto();
  friend void protobuf_ShutdownFile_motion_5fcontrol_5fprotos_2eproto();

  void InitAsDefaultInstance();
  static Tuning* default_instance_;
};
// -------------------------------------------------------------------

class Pid : public ::google::protobuf::Message {
 public:
  Pid();
  virtual ~Pid();

  Pid(const Pid& from);

  inline Pid& operator=(const Pid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pid& default_instance();

  void Swap(Pid* other);

  // implements Message ----------------------------------------------

  Pid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pid& from);
  void MergeFrom(const Pid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Pid_PidCommand PidCommand;
  static const PidCommand POSITION_KP = Pid_PidCommand_POSITION_KP;
  static const PidCommand POSITION_KI = Pid_PidCommand_POSITION_KI;
  static const PidCommand POSITION_KD = Pid_PidCommand_POSITION_KD;
  static const PidCommand POSITION_TARGET = Pid_PidCommand_POSITION_TARGET;
  static const PidCommand POSITION_PARAMETER_VALUES = Pid_PidCommand_POSITION_PARAMETER_VALUES;
  static const PidCommand VELOCITY_KP = Pid_PidCommand_VELOCITY_KP;
  static const PidCommand VELOCITY_KI = Pid_PidCommand_VELOCITY_KI;
  static const PidCommand VELOCITY_KD = Pid_PidCommand_VELOCITY_KD;
  static const PidCommand VELOCITY_TARGET = Pid_PidCommand_VELOCITY_TARGET;
  static const PidCommand VELOCITY_PARAMETER_VALUES = Pid_PidCommand_VELOCITY_PARAMETER_VALUES;
  static const PidCommand TORQUE_KP = Pid_PidCommand_TORQUE_KP;
  static const PidCommand TORQUE_KI = Pid_PidCommand_TORQUE_KI;
  static const PidCommand TORQUE_KD = Pid_PidCommand_TORQUE_KD;
  static const PidCommand TORQUE_TARGET = Pid_PidCommand_TORQUE_TARGET;
  static const PidCommand TORQUE_PARAMETER_VALUES = Pid_PidCommand_TORQUE_PARAMETER_VALUES;
  static const PidCommand TIME = Pid_PidCommand_TIME;
  static inline bool PidCommand_IsValid(int value) {
    return Pid_PidCommand_IsValid(value);
  }
  static const PidCommand PidCommand_MIN =
    Pid_PidCommand_PidCommand_MIN;
  static const PidCommand PidCommand_MAX =
    Pid_PidCommand_PidCommand_MAX;
  static const int PidCommand_ARRAYSIZE =
    Pid_PidCommand_PidCommand_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PidCommand_descriptor() {
    return Pid_PidCommand_descriptor();
  }
  static inline const ::std::string& PidCommand_Name(PidCommand value) {
    return Pid_PidCommand_Name(value);
  }
  static inline bool PidCommand_Parse(const ::std::string& name,
      PidCommand* value) {
    return Pid_PidCommand_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required .com.synapticon.motioncontrolprotos.Pid.PidCommand pid_command = 2;
  inline bool has_pid_command() const;
  inline void clear_pid_command();
  static const int kPidCommandFieldNumber = 2;
  inline ::com::synapticon::motioncontrolprotos::Pid_PidCommand pid_command() const;
  inline void set_pid_command(::com::synapticon::motioncontrolprotos::Pid_PidCommand value);

  // optional int32 parameter = 3;
  inline bool has_parameter() const;
  inline void clear_parameter();
  static const int kParameterFieldNumber = 3;
  inline ::google::protobuf::int32 parameter() const;
  inline void set_parameter(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.synapticon.motioncontrolprotos.Pid)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_pid_command();
  inline void clear_has_pid_command();
  inline void set_has_parameter();
  inline void clear_has_parameter();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 index_;
  int pid_command_;
  ::google::protobuf::int32 parameter_;
  friend void  protobuf_AddDesc_motion_5fcontrol_5fprotos_2eproto();
  friend void protobuf_AssignDesc_motion_5fcontrol_5fprotos_2eproto();
  friend void protobuf_ShutdownFile_motion_5fcontrol_5fprotos_2eproto();

  void InitAsDefaultInstance();
  static Pid* default_instance_;
};
// -------------------------------------------------------------------

class Profile : public ::google::protobuf::Message {
 public:
  Profile();
  virtual ~Profile();

  Profile(const Profile& from);

  inline Profile& operator=(const Profile& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Profile& default_instance();

  void Swap(Profile* other);

  // implements Message ----------------------------------------------

  Profile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Profile& from);
  void MergeFrom(const Profile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Profile_ProfileCommand ProfileCommand;
  static const ProfileCommand POSITION_TARGET = Profile_ProfileCommand_POSITION_TARGET;
  static const ProfileCommand VELOCITY_TARGET = Profile_ProfileCommand_VELOCITY_TARGET;
  static const ProfileCommand TORQUE_TARGET = Profile_ProfileCommand_TORQUE_TARGET;
  static const ProfileCommand ACCELERATION = Profile_ProfileCommand_ACCELERATION;
  static const ProfileCommand DECELERATION = Profile_ProfileCommand_DECELERATION;
  static const ProfileCommand TORQUE_SLOPE = Profile_ProfileCommand_TORQUE_SLOPE;
  static const ProfileCommand VELOCITY = Profile_ProfileCommand_VELOCITY;
  static const ProfileCommand TIME = Profile_ProfileCommand_TIME;
  static const ProfileCommand PARAMETER_VALUES = Profile_ProfileCommand_PARAMETER_VALUES;
  static inline bool ProfileCommand_IsValid(int value) {
    return Profile_ProfileCommand_IsValid(value);
  }
  static const ProfileCommand ProfileCommand_MIN =
    Profile_ProfileCommand_ProfileCommand_MIN;
  static const ProfileCommand ProfileCommand_MAX =
    Profile_ProfileCommand_ProfileCommand_MAX;
  static const int ProfileCommand_ARRAYSIZE =
    Profile_ProfileCommand_ProfileCommand_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProfileCommand_descriptor() {
    return Profile_ProfileCommand_descriptor();
  }
  static inline const ::std::string& ProfileCommand_Name(ProfileCommand value) {
    return Profile_ProfileCommand_Name(value);
  }
  static inline bool ProfileCommand_Parse(const ::std::string& name,
      ProfileCommand* value) {
    return Profile_ProfileCommand_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required .com.synapticon.motioncontrolprotos.Profile.ProfileCommand profile_command = 2;
  inline bool has_profile_command() const;
  inline void clear_profile_command();
  static const int kProfileCommandFieldNumber = 2;
  inline ::com::synapticon::motioncontrolprotos::Profile_ProfileCommand profile_command() const;
  inline void set_profile_command(::com::synapticon::motioncontrolprotos::Profile_ProfileCommand value);

  // optional int32 parameter = 3;
  inline bool has_parameter() const;
  inline void clear_parameter();
  static const int kParameterFieldNumber = 3;
  inline ::google::protobuf::int32 parameter() const;
  inline void set_parameter(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.synapticon.motioncontrolprotos.Profile)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_profile_command();
  inline void clear_has_profile_command();
  inline void set_has_parameter();
  inline void clear_has_parameter();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 index_;
  int profile_command_;
  ::google::protobuf::int32 parameter_;
  friend void  protobuf_AddDesc_motion_5fcontrol_5fprotos_2eproto();
  friend void protobuf_AssignDesc_motion_5fcontrol_5fprotos_2eproto();
  friend void protobuf_ShutdownFile_motion_5fcontrol_5fprotos_2eproto();

  void InitAsDefaultInstance();
  static Profile* default_instance_;
};
// -------------------------------------------------------------------

class Play : public ::google::protobuf::Message {
 public:
  Play();
  virtual ~Play();

  Play(const Play& from);

  inline Play& operator=(const Play& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Play& default_instance();

  void Swap(Play* other);

  // implements Message ----------------------------------------------

  Play* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Play& from);
  void MergeFrom(const Play& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Play_PlayCommand PlayCommand;
  static const PlayCommand POSITION_TARGET = Play_PlayCommand_POSITION_TARGET;
  static const PlayCommand POSITION_STOP = Play_PlayCommand_POSITION_STOP;
  static const PlayCommand VELOCITY_TARGET = Play_PlayCommand_VELOCITY_TARGET;
  static const PlayCommand VELOCITY_STOP = Play_PlayCommand_VELOCITY_STOP;
  static const PlayCommand TORQUE_TARGET = Play_PlayCommand_TORQUE_TARGET;
  static const PlayCommand TORQUE_STOP = Play_PlayCommand_TORQUE_STOP;
  static const PlayCommand PASSIVE_MODE = Play_PlayCommand_PASSIVE_MODE;
  static const PlayCommand ACTIVE_MODE = Play_PlayCommand_ACTIVE_MODE;
  static const PlayCommand RESET_ABSOLUTE_POSITION = Play_PlayCommand_RESET_ABSOLUTE_POSITION;
  static inline bool PlayCommand_IsValid(int value) {
    return Play_PlayCommand_IsValid(value);
  }
  static const PlayCommand PlayCommand_MIN =
    Play_PlayCommand_PlayCommand_MIN;
  static const PlayCommand PlayCommand_MAX =
    Play_PlayCommand_PlayCommand_MAX;
  static const int PlayCommand_ARRAYSIZE =
    Play_PlayCommand_PlayCommand_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PlayCommand_descriptor() {
    return Play_PlayCommand_descriptor();
  }
  static inline const ::std::string& PlayCommand_Name(PlayCommand value) {
    return Play_PlayCommand_Name(value);
  }
  static inline bool PlayCommand_Parse(const ::std::string& name,
      PlayCommand* value) {
    return Play_PlayCommand_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required .com.synapticon.motioncontrolprotos.Play.PlayCommand play_command = 2;
  inline bool has_play_command() const;
  inline void clear_play_command();
  static const int kPlayCommandFieldNumber = 2;
  inline ::com::synapticon::motioncontrolprotos::Play_PlayCommand play_command() const;
  inline void set_play_command(::com::synapticon::motioncontrolprotos::Play_PlayCommand value);

  // optional int32 parameter = 3;
  inline bool has_parameter() const;
  inline void clear_parameter();
  static const int kParameterFieldNumber = 3;
  inline ::google::protobuf::int32 parameter() const;
  inline void set_parameter(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.synapticon.motioncontrolprotos.Play)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_play_command();
  inline void clear_has_play_command();
  inline void set_has_parameter();
  inline void clear_has_parameter();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 index_;
  int play_command_;
  ::google::protobuf::int32 parameter_;
  friend void  protobuf_AddDesc_motion_5fcontrol_5fprotos_2eproto();
  friend void protobuf_AssignDesc_motion_5fcontrol_5fprotos_2eproto();
  friend void protobuf_ShutdownFile_motion_5fcontrol_5fprotos_2eproto();

  void InitAsDefaultInstance();
  static Play* default_instance_;
};
// -------------------------------------------------------------------

class Config : public ::google::protobuf::Message {
 public:
  Config();
  virtual ~Config();

  Config(const Config& from);

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Config& default_instance();

  void Swap(Config* other);

  // implements Message ----------------------------------------------

  Config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Config_ConfigCommand ConfigCommand;
  static const ConfigCommand HALL_POLE_PAIRS = Config_ConfigCommand_HALL_POLE_PAIRS;
  static const ConfigCommand IE_SENSOR_RESOLUTION = Config_ConfigCommand_IE_SENSOR_RESOLUTION;
  static const ConfigCommand IE_INDEX_TYPE = Config_ConfigCommand_IE_INDEX_TYPE;
  static const ConfigCommand IE_SENSOR_POLARITY = Config_ConfigCommand_IE_SENSOR_POLARITY;
  static const ConfigCommand IE_SIGNAL_TYPE = Config_ConfigCommand_IE_SIGNAL_TYPE;
  static const ConfigCommand BISS_MULTITURN_LENGTH = Config_ConfigCommand_BISS_MULTITURN_LENGTH;
  static const ConfigCommand BISS_MULTITURN_RESOLUTION = Config_ConfigCommand_BISS_MULTITURN_RESOLUTION;
  static const ConfigCommand BISS_SINGLETURN_LENGTH = Config_ConfigCommand_BISS_SINGLETURN_LENGTH;
  static const ConfigCommand BISS_SINGLETURN_RESOLUTION = Config_ConfigCommand_BISS_SINGLETURN_RESOLUTION;
  static const ConfigCommand BISS_STATUS_LENGTH = Config_ConfigCommand_BISS_STATUS_LENGTH;
  static const ConfigCommand BISS_CRC_POLY = Config_ConfigCommand_BISS_CRC_POLY;
  static const ConfigCommand BISS_POLE_PAIRS = Config_ConfigCommand_BISS_POLE_PAIRS;
  static const ConfigCommand BISS_POLARITY = Config_ConfigCommand_BISS_POLARITY;
  static const ConfigCommand BISS_CLOCK_DIVIDEND = Config_ConfigCommand_BISS_CLOCK_DIVIDEND;
  static const ConfigCommand BISS_CLOCK_DIVISOR = Config_ConfigCommand_BISS_CLOCK_DIVISOR;
  static const ConfigCommand BISS_TIMEOUT = Config_ConfigCommand_BISS_TIMEOUT;
  static const ConfigCommand BISS_VELOCITY_LOOP = Config_ConfigCommand_BISS_VELOCITY_LOOP;
  static const ConfigCommand BISS_MAX_TICKS = Config_ConfigCommand_BISS_MAX_TICKS;
  static const ConfigCommand BISS_OFFSET_ELECTRICAL = Config_ConfigCommand_BISS_OFFSET_ELECTRICAL;
  static const ConfigCommand AMS_FACTORY_SETTINGS = Config_ConfigCommand_AMS_FACTORY_SETTINGS;
  static const ConfigCommand AMS_POLARITY = Config_ConfigCommand_AMS_POLARITY;
  static const ConfigCommand AMS_HYSTERESIS = Config_ConfigCommand_AMS_HYSTERESIS;
  static const ConfigCommand AMS_NOISE_SETTINGS = Config_ConfigCommand_AMS_NOISE_SETTINGS;
  static const ConfigCommand AMS_UVW_ABI = Config_ConfigCommand_AMS_UVW_ABI;
  static const ConfigCommand AMS_DYN_ANGLE_COMP = Config_ConfigCommand_AMS_DYN_ANGLE_COMP;
  static const ConfigCommand AMS_DATA_SELECT = Config_ConfigCommand_AMS_DATA_SELECT;
  static const ConfigCommand AMS_PWM_ON = Config_ConfigCommand_AMS_PWM_ON;
  static const ConfigCommand AMS_ABI_RESOLUTION = Config_ConfigCommand_AMS_ABI_RESOLUTION;
  static const ConfigCommand AMS_RESOLUTION_BITS = Config_ConfigCommand_AMS_RESOLUTION_BITS;
  static const ConfigCommand AMS_OFFSET = Config_ConfigCommand_AMS_OFFSET;
  static const ConfigCommand AMS_POLE_PAIRS = Config_ConfigCommand_AMS_POLE_PAIRS;
  static const ConfigCommand AMS_MAX_TICKS = Config_ConfigCommand_AMS_MAX_TICKS;
  static const ConfigCommand AMS_CACHE_TIME = Config_ConfigCommand_AMS_CACHE_TIME;
  static const ConfigCommand AMS_VELOCITY_LOOP = Config_ConfigCommand_AMS_VELOCITY_LOOP;
  static const ConfigCommand MOTOR_TYPE = Config_ConfigCommand_MOTOR_TYPE;
  static const ConfigCommand WINDING_TYPE = Config_ConfigCommand_WINDING_TYPE;
  static const ConfigCommand COMMUTATION_SENSOR = Config_ConfigCommand_COMMUTATION_SENSOR;
  static const ConfigCommand COMMUTATION_OFFSET_CLOCKWISE = Config_ConfigCommand_COMMUTATION_OFFSET_CLOCKWISE;
  static const ConfigCommand COMMUTATION_OFFSET_COUNTERCLOCKWISE = Config_ConfigCommand_COMMUTATION_OFFSET_COUNTERCLOCKWISE;
  static const ConfigCommand COMMUTATION_LOOP_PERIOD = Config_ConfigCommand_COMMUTATION_LOOP_PERIOD;
  static const ConfigCommand FEEDBACK_SENSOR = Config_ConfigCommand_FEEDBACK_SENSOR;
  static const ConfigCommand POSITION_CONTROL_LOOP_PERIOD = Config_ConfigCommand_POSITION_CONTROL_LOOP_PERIOD;
  static const ConfigCommand POSITION_KP = Config_ConfigCommand_POSITION_KP;
  static const ConfigCommand POSITION_KI = Config_ConfigCommand_POSITION_KI;
  static const ConfigCommand POSITION_KD = Config_ConfigCommand_POSITION_KD;
  static const ConfigCommand VELOCITY_CONTROL_LOOP_PERIOD = Config_ConfigCommand_VELOCITY_CONTROL_LOOP_PERIOD;
  static const ConfigCommand VELOCITY_KP = Config_ConfigCommand_VELOCITY_KP;
  static const ConfigCommand VELOCITY_KI = Config_ConfigCommand_VELOCITY_KI;
  static const ConfigCommand VELOCITY_KD = Config_ConfigCommand_VELOCITY_KD;
  static const ConfigCommand TORQUE_CONTROL_LOOP_PERIOD = Config_ConfigCommand_TORQUE_CONTROL_LOOP_PERIOD;
  static const ConfigCommand TORQUE_KP = Config_ConfigCommand_TORQUE_KP;
  static const ConfigCommand TORQUE_KI = Config_ConfigCommand_TORQUE_KI;
  static const ConfigCommand TORQUE_KD = Config_ConfigCommand_TORQUE_KD;
  static const ConfigCommand PARAMETER_VALUES = Config_ConfigCommand_PARAMETER_VALUES;
  static const ConfigCommand SAVE = Config_ConfigCommand_SAVE;
  static inline bool ConfigCommand_IsValid(int value) {
    return Config_ConfigCommand_IsValid(value);
  }
  static const ConfigCommand ConfigCommand_MIN =
    Config_ConfigCommand_ConfigCommand_MIN;
  static const ConfigCommand ConfigCommand_MAX =
    Config_ConfigCommand_ConfigCommand_MAX;
  static const int ConfigCommand_ARRAYSIZE =
    Config_ConfigCommand_ConfigCommand_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ConfigCommand_descriptor() {
    return Config_ConfigCommand_descriptor();
  }
  static inline const ::std::string& ConfigCommand_Name(ConfigCommand value) {
    return Config_ConfigCommand_Name(value);
  }
  static inline bool ConfigCommand_Parse(const ::std::string& name,
      ConfigCommand* value) {
    return Config_ConfigCommand_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required .com.synapticon.motioncontrolprotos.Config.ConfigCommand config_command = 2;
  inline bool has_config_command() const;
  inline void clear_config_command();
  static const int kConfigCommandFieldNumber = 2;
  inline ::com::synapticon::motioncontrolprotos::Config_ConfigCommand config_command() const;
  inline void set_config_command(::com::synapticon::motioncontrolprotos::Config_ConfigCommand value);

  // optional int32 parameter = 3;
  inline bool has_parameter() const;
  inline void clear_parameter();
  static const int kParameterFieldNumber = 3;
  inline ::google::protobuf::int32 parameter() const;
  inline void set_parameter(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.synapticon.motioncontrolprotos.Config)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_config_command();
  inline void clear_has_config_command();
  inline void set_has_parameter();
  inline void clear_has_parameter();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 index_;
  int config_command_;
  ::google::protobuf::int32 parameter_;
  friend void  protobuf_AddDesc_motion_5fcontrol_5fprotos_2eproto();
  friend void protobuf_AssignDesc_motion_5fcontrol_5fprotos_2eproto();
  friend void protobuf_ShutdownFile_motion_5fcontrol_5fprotos_2eproto();

  void InitAsDefaultInstance();
  static Config* default_instance_;
};
// ===================================================================


// ===================================================================

// MotionControl

// required .com.synapticon.motioncontrolprotos.MotionControl.Type type = 1;
inline bool MotionControl::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MotionControl::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MotionControl::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MotionControl::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::com::synapticon::motioncontrolprotos::MotionControl_Type MotionControl::type() const {
  // @@protoc_insertion_point(field_get:com.synapticon.motioncontrolprotos.MotionControl.type)
  return static_cast< ::com::synapticon::motioncontrolprotos::MotionControl_Type >(type_);
}
inline void MotionControl::set_type(::com::synapticon::motioncontrolprotos::MotionControl_Type value) {
  assert(::com::synapticon::motioncontrolprotos::MotionControl_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:com.synapticon.motioncontrolprotos.MotionControl.type)
}

// optional .com.synapticon.motioncontrolprotos.Tuning tuning = 2;
inline bool MotionControl::has_tuning() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MotionControl::set_has_tuning() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MotionControl::clear_has_tuning() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MotionControl::clear_tuning() {
  if (tuning_ != NULL) tuning_->::com::synapticon::motioncontrolprotos::Tuning::Clear();
  clear_has_tuning();
}
inline const ::com::synapticon::motioncontrolprotos::Tuning& MotionControl::tuning() const {
  // @@protoc_insertion_point(field_get:com.synapticon.motioncontrolprotos.MotionControl.tuning)
  return tuning_ != NULL ? *tuning_ : *default_instance_->tuning_;
}
inline ::com::synapticon::motioncontrolprotos::Tuning* MotionControl::mutable_tuning() {
  set_has_tuning();
  if (tuning_ == NULL) tuning_ = new ::com::synapticon::motioncontrolprotos::Tuning;
  // @@protoc_insertion_point(field_mutable:com.synapticon.motioncontrolprotos.MotionControl.tuning)
  return tuning_;
}
inline ::com::synapticon::motioncontrolprotos::Tuning* MotionControl::release_tuning() {
  clear_has_tuning();
  ::com::synapticon::motioncontrolprotos::Tuning* temp = tuning_;
  tuning_ = NULL;
  return temp;
}
inline void MotionControl::set_allocated_tuning(::com::synapticon::motioncontrolprotos::Tuning* tuning) {
  delete tuning_;
  tuning_ = tuning;
  if (tuning) {
    set_has_tuning();
  } else {
    clear_has_tuning();
  }
  // @@protoc_insertion_point(field_set_allocated:com.synapticon.motioncontrolprotos.MotionControl.tuning)
}

// optional .com.synapticon.motioncontrolprotos.Pid pid = 3;
inline bool MotionControl::has_pid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MotionControl::set_has_pid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MotionControl::clear_has_pid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MotionControl::clear_pid() {
  if (pid_ != NULL) pid_->::com::synapticon::motioncontrolprotos::Pid::Clear();
  clear_has_pid();
}
inline const ::com::synapticon::motioncontrolprotos::Pid& MotionControl::pid() const {
  // @@protoc_insertion_point(field_get:com.synapticon.motioncontrolprotos.MotionControl.pid)
  return pid_ != NULL ? *pid_ : *default_instance_->pid_;
}
inline ::com::synapticon::motioncontrolprotos::Pid* MotionControl::mutable_pid() {
  set_has_pid();
  if (pid_ == NULL) pid_ = new ::com::synapticon::motioncontrolprotos::Pid;
  // @@protoc_insertion_point(field_mutable:com.synapticon.motioncontrolprotos.MotionControl.pid)
  return pid_;
}
inline ::com::synapticon::motioncontrolprotos::Pid* MotionControl::release_pid() {
  clear_has_pid();
  ::com::synapticon::motioncontrolprotos::Pid* temp = pid_;
  pid_ = NULL;
  return temp;
}
inline void MotionControl::set_allocated_pid(::com::synapticon::motioncontrolprotos::Pid* pid) {
  delete pid_;
  pid_ = pid;
  if (pid) {
    set_has_pid();
  } else {
    clear_has_pid();
  }
  // @@protoc_insertion_point(field_set_allocated:com.synapticon.motioncontrolprotos.MotionControl.pid)
}

// optional .com.synapticon.motioncontrolprotos.Profile profile = 4;
inline bool MotionControl::has_profile() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MotionControl::set_has_profile() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MotionControl::clear_has_profile() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MotionControl::clear_profile() {
  if (profile_ != NULL) profile_->::com::synapticon::motioncontrolprotos::Profile::Clear();
  clear_has_profile();
}
inline const ::com::synapticon::motioncontrolprotos::Profile& MotionControl::profile() const {
  // @@protoc_insertion_point(field_get:com.synapticon.motioncontrolprotos.MotionControl.profile)
  return profile_ != NULL ? *profile_ : *default_instance_->profile_;
}
inline ::com::synapticon::motioncontrolprotos::Profile* MotionControl::mutable_profile() {
  set_has_profile();
  if (profile_ == NULL) profile_ = new ::com::synapticon::motioncontrolprotos::Profile;
  // @@protoc_insertion_point(field_mutable:com.synapticon.motioncontrolprotos.MotionControl.profile)
  return profile_;
}
inline ::com::synapticon::motioncontrolprotos::Profile* MotionControl::release_profile() {
  clear_has_profile();
  ::com::synapticon::motioncontrolprotos::Profile* temp = profile_;
  profile_ = NULL;
  return temp;
}
inline void MotionControl::set_allocated_profile(::com::synapticon::motioncontrolprotos::Profile* profile) {
  delete profile_;
  profile_ = profile;
  if (profile) {
    set_has_profile();
  } else {
    clear_has_profile();
  }
  // @@protoc_insertion_point(field_set_allocated:com.synapticon.motioncontrolprotos.MotionControl.profile)
}

// optional .com.synapticon.motioncontrolprotos.Play play = 5;
inline bool MotionControl::has_play() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MotionControl::set_has_play() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MotionControl::clear_has_play() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MotionControl::clear_play() {
  if (play_ != NULL) play_->::com::synapticon::motioncontrolprotos::Play::Clear();
  clear_has_play();
}
inline const ::com::synapticon::motioncontrolprotos::Play& MotionControl::play() const {
  // @@protoc_insertion_point(field_get:com.synapticon.motioncontrolprotos.MotionControl.play)
  return play_ != NULL ? *play_ : *default_instance_->play_;
}
inline ::com::synapticon::motioncontrolprotos::Play* MotionControl::mutable_play() {
  set_has_play();
  if (play_ == NULL) play_ = new ::com::synapticon::motioncontrolprotos::Play;
  // @@protoc_insertion_point(field_mutable:com.synapticon.motioncontrolprotos.MotionControl.play)
  return play_;
}
inline ::com::synapticon::motioncontrolprotos::Play* MotionControl::release_play() {
  clear_has_play();
  ::com::synapticon::motioncontrolprotos::Play* temp = play_;
  play_ = NULL;
  return temp;
}
inline void MotionControl::set_allocated_play(::com::synapticon::motioncontrolprotos::Play* play) {
  delete play_;
  play_ = play;
  if (play) {
    set_has_play();
  } else {
    clear_has_play();
  }
  // @@protoc_insertion_point(field_set_allocated:com.synapticon.motioncontrolprotos.MotionControl.play)
}

// optional .com.synapticon.motioncontrolprotos.Config config = 6;
inline bool MotionControl::has_config() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MotionControl::set_has_config() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MotionControl::clear_has_config() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MotionControl::clear_config() {
  if (config_ != NULL) config_->::com::synapticon::motioncontrolprotos::Config::Clear();
  clear_has_config();
}
inline const ::com::synapticon::motioncontrolprotos::Config& MotionControl::config() const {
  // @@protoc_insertion_point(field_get:com.synapticon.motioncontrolprotos.MotionControl.config)
  return config_ != NULL ? *config_ : *default_instance_->config_;
}
inline ::com::synapticon::motioncontrolprotos::Config* MotionControl::mutable_config() {
  set_has_config();
  if (config_ == NULL) config_ = new ::com::synapticon::motioncontrolprotos::Config;
  // @@protoc_insertion_point(field_mutable:com.synapticon.motioncontrolprotos.MotionControl.config)
  return config_;
}
inline ::com::synapticon::motioncontrolprotos::Config* MotionControl::release_config() {
  clear_has_config();
  ::com::synapticon::motioncontrolprotos::Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline void MotionControl::set_allocated_config(::com::synapticon::motioncontrolprotos::Config* config) {
  delete config_;
  config_ = config;
  if (config) {
    set_has_config();
  } else {
    clear_has_config();
  }
  // @@protoc_insertion_point(field_set_allocated:com.synapticon.motioncontrolprotos.MotionControl.config)
}

// -------------------------------------------------------------------

// Tuning

// required int32 index = 1;
inline bool Tuning::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Tuning::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Tuning::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Tuning::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 Tuning::index() const {
  // @@protoc_insertion_point(field_get:com.synapticon.motioncontrolprotos.Tuning.index)
  return index_;
}
inline void Tuning::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:com.synapticon.motioncontrolprotos.Tuning.index)
}

// required .com.synapticon.motioncontrolprotos.Tuning.TuningCommand tuning_command = 2;
inline bool Tuning::has_tuning_command() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Tuning::set_has_tuning_command() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Tuning::clear_has_tuning_command() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Tuning::clear_tuning_command() {
  tuning_command_ = 0;
  clear_has_tuning_command();
}
inline ::com::synapticon::motioncontrolprotos::Tuning_TuningCommand Tuning::tuning_command() const {
  // @@protoc_insertion_point(field_get:com.synapticon.motioncontrolprotos.Tuning.tuning_command)
  return static_cast< ::com::synapticon::motioncontrolprotos::Tuning_TuningCommand >(tuning_command_);
}
inline void Tuning::set_tuning_command(::com::synapticon::motioncontrolprotos::Tuning_TuningCommand value) {
  assert(::com::synapticon::motioncontrolprotos::Tuning_TuningCommand_IsValid(value));
  set_has_tuning_command();
  tuning_command_ = value;
  // @@protoc_insertion_point(field_set:com.synapticon.motioncontrolprotos.Tuning.tuning_command)
}

// optional int32 parameter = 3;
inline bool Tuning::has_parameter() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Tuning::set_has_parameter() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Tuning::clear_has_parameter() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Tuning::clear_parameter() {
  parameter_ = 0;
  clear_has_parameter();
}
inline ::google::protobuf::int32 Tuning::parameter() const {
  // @@protoc_insertion_point(field_get:com.synapticon.motioncontrolprotos.Tuning.parameter)
  return parameter_;
}
inline void Tuning::set_parameter(::google::protobuf::int32 value) {
  set_has_parameter();
  parameter_ = value;
  // @@protoc_insertion_point(field_set:com.synapticon.motioncontrolprotos.Tuning.parameter)
}

// -------------------------------------------------------------------

// Pid

// required int32 index = 1;
inline bool Pid::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pid::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pid::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pid::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 Pid::index() const {
  // @@protoc_insertion_point(field_get:com.synapticon.motioncontrolprotos.Pid.index)
  return index_;
}
inline void Pid::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:com.synapticon.motioncontrolprotos.Pid.index)
}

// required .com.synapticon.motioncontrolprotos.Pid.PidCommand pid_command = 2;
inline bool Pid::has_pid_command() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pid::set_has_pid_command() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pid::clear_has_pid_command() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pid::clear_pid_command() {
  pid_command_ = 0;
  clear_has_pid_command();
}
inline ::com::synapticon::motioncontrolprotos::Pid_PidCommand Pid::pid_command() const {
  // @@protoc_insertion_point(field_get:com.synapticon.motioncontrolprotos.Pid.pid_command)
  return static_cast< ::com::synapticon::motioncontrolprotos::Pid_PidCommand >(pid_command_);
}
inline void Pid::set_pid_command(::com::synapticon::motioncontrolprotos::Pid_PidCommand value) {
  assert(::com::synapticon::motioncontrolprotos::Pid_PidCommand_IsValid(value));
  set_has_pid_command();
  pid_command_ = value;
  // @@protoc_insertion_point(field_set:com.synapticon.motioncontrolprotos.Pid.pid_command)
}

// optional int32 parameter = 3;
inline bool Pid::has_parameter() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Pid::set_has_parameter() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Pid::clear_has_parameter() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Pid::clear_parameter() {
  parameter_ = 0;
  clear_has_parameter();
}
inline ::google::protobuf::int32 Pid::parameter() const {
  // @@protoc_insertion_point(field_get:com.synapticon.motioncontrolprotos.Pid.parameter)
  return parameter_;
}
inline void Pid::set_parameter(::google::protobuf::int32 value) {
  set_has_parameter();
  parameter_ = value;
  // @@protoc_insertion_point(field_set:com.synapticon.motioncontrolprotos.Pid.parameter)
}

// -------------------------------------------------------------------

// Profile

// required int32 index = 1;
inline bool Profile::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Profile::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Profile::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Profile::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 Profile::index() const {
  // @@protoc_insertion_point(field_get:com.synapticon.motioncontrolprotos.Profile.index)
  return index_;
}
inline void Profile::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:com.synapticon.motioncontrolprotos.Profile.index)
}

// required .com.synapticon.motioncontrolprotos.Profile.ProfileCommand profile_command = 2;
inline bool Profile::has_profile_command() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Profile::set_has_profile_command() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Profile::clear_has_profile_command() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Profile::clear_profile_command() {
  profile_command_ = 0;
  clear_has_profile_command();
}
inline ::com::synapticon::motioncontrolprotos::Profile_ProfileCommand Profile::profile_command() const {
  // @@protoc_insertion_point(field_get:com.synapticon.motioncontrolprotos.Profile.profile_command)
  return static_cast< ::com::synapticon::motioncontrolprotos::Profile_ProfileCommand >(profile_command_);
}
inline void Profile::set_profile_command(::com::synapticon::motioncontrolprotos::Profile_ProfileCommand value) {
  assert(::com::synapticon::motioncontrolprotos::Profile_ProfileCommand_IsValid(value));
  set_has_profile_command();
  profile_command_ = value;
  // @@protoc_insertion_point(field_set:com.synapticon.motioncontrolprotos.Profile.profile_command)
}

// optional int32 parameter = 3;
inline bool Profile::has_parameter() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Profile::set_has_parameter() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Profile::clear_has_parameter() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Profile::clear_parameter() {
  parameter_ = 0;
  clear_has_parameter();
}
inline ::google::protobuf::int32 Profile::parameter() const {
  // @@protoc_insertion_point(field_get:com.synapticon.motioncontrolprotos.Profile.parameter)
  return parameter_;
}
inline void Profile::set_parameter(::google::protobuf::int32 value) {
  set_has_parameter();
  parameter_ = value;
  // @@protoc_insertion_point(field_set:com.synapticon.motioncontrolprotos.Profile.parameter)
}

// -------------------------------------------------------------------

// Play

// required int32 index = 1;
inline bool Play::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Play::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Play::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Play::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 Play::index() const {
  // @@protoc_insertion_point(field_get:com.synapticon.motioncontrolprotos.Play.index)
  return index_;
}
inline void Play::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:com.synapticon.motioncontrolprotos.Play.index)
}

// required .com.synapticon.motioncontrolprotos.Play.PlayCommand play_command = 2;
inline bool Play::has_play_command() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Play::set_has_play_command() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Play::clear_has_play_command() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Play::clear_play_command() {
  play_command_ = 0;
  clear_has_play_command();
}
inline ::com::synapticon::motioncontrolprotos::Play_PlayCommand Play::play_command() const {
  // @@protoc_insertion_point(field_get:com.synapticon.motioncontrolprotos.Play.play_command)
  return static_cast< ::com::synapticon::motioncontrolprotos::Play_PlayCommand >(play_command_);
}
inline void Play::set_play_command(::com::synapticon::motioncontrolprotos::Play_PlayCommand value) {
  assert(::com::synapticon::motioncontrolprotos::Play_PlayCommand_IsValid(value));
  set_has_play_command();
  play_command_ = value;
  // @@protoc_insertion_point(field_set:com.synapticon.motioncontrolprotos.Play.play_command)
}

// optional int32 parameter = 3;
inline bool Play::has_parameter() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Play::set_has_parameter() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Play::clear_has_parameter() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Play::clear_parameter() {
  parameter_ = 0;
  clear_has_parameter();
}
inline ::google::protobuf::int32 Play::parameter() const {
  // @@protoc_insertion_point(field_get:com.synapticon.motioncontrolprotos.Play.parameter)
  return parameter_;
}
inline void Play::set_parameter(::google::protobuf::int32 value) {
  set_has_parameter();
  parameter_ = value;
  // @@protoc_insertion_point(field_set:com.synapticon.motioncontrolprotos.Play.parameter)
}

// -------------------------------------------------------------------

// Config

// required int32 index = 1;
inline bool Config::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Config::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Config::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Config::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 Config::index() const {
  // @@protoc_insertion_point(field_get:com.synapticon.motioncontrolprotos.Config.index)
  return index_;
}
inline void Config::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:com.synapticon.motioncontrolprotos.Config.index)
}

// required .com.synapticon.motioncontrolprotos.Config.ConfigCommand config_command = 2;
inline bool Config::has_config_command() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Config::set_has_config_command() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Config::clear_has_config_command() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Config::clear_config_command() {
  config_command_ = 0;
  clear_has_config_command();
}
inline ::com::synapticon::motioncontrolprotos::Config_ConfigCommand Config::config_command() const {
  // @@protoc_insertion_point(field_get:com.synapticon.motioncontrolprotos.Config.config_command)
  return static_cast< ::com::synapticon::motioncontrolprotos::Config_ConfigCommand >(config_command_);
}
inline void Config::set_config_command(::com::synapticon::motioncontrolprotos::Config_ConfigCommand value) {
  assert(::com::synapticon::motioncontrolprotos::Config_ConfigCommand_IsValid(value));
  set_has_config_command();
  config_command_ = value;
  // @@protoc_insertion_point(field_set:com.synapticon.motioncontrolprotos.Config.config_command)
}

// optional int32 parameter = 3;
inline bool Config::has_parameter() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Config::set_has_parameter() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Config::clear_has_parameter() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Config::clear_parameter() {
  parameter_ = 0;
  clear_has_parameter();
}
inline ::google::protobuf::int32 Config::parameter() const {
  // @@protoc_insertion_point(field_get:com.synapticon.motioncontrolprotos.Config.parameter)
  return parameter_;
}
inline void Config::set_parameter(::google::protobuf::int32 value) {
  set_has_parameter();
  parameter_ = value;
  // @@protoc_insertion_point(field_set:com.synapticon.motioncontrolprotos.Config.parameter)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace motioncontrolprotos
}  // namespace synapticon
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::synapticon::motioncontrolprotos::MotionControl_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::synapticon::motioncontrolprotos::MotionControl_Type>() {
  return ::com::synapticon::motioncontrolprotos::MotionControl_Type_descriptor();
}
template <> struct is_proto_enum< ::com::synapticon::motioncontrolprotos::Tuning_TuningCommand> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::synapticon::motioncontrolprotos::Tuning_TuningCommand>() {
  return ::com::synapticon::motioncontrolprotos::Tuning_TuningCommand_descriptor();
}
template <> struct is_proto_enum< ::com::synapticon::motioncontrolprotos::Pid_PidCommand> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::synapticon::motioncontrolprotos::Pid_PidCommand>() {
  return ::com::synapticon::motioncontrolprotos::Pid_PidCommand_descriptor();
}
template <> struct is_proto_enum< ::com::synapticon::motioncontrolprotos::Profile_ProfileCommand> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::synapticon::motioncontrolprotos::Profile_ProfileCommand>() {
  return ::com::synapticon::motioncontrolprotos::Profile_ProfileCommand_descriptor();
}
template <> struct is_proto_enum< ::com::synapticon::motioncontrolprotos::Play_PlayCommand> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::synapticon::motioncontrolprotos::Play_PlayCommand>() {
  return ::com::synapticon::motioncontrolprotos::Play_PlayCommand_descriptor();
}
template <> struct is_proto_enum< ::com::synapticon::motioncontrolprotos::Config_ConfigCommand> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::synapticon::motioncontrolprotos::Config_ConfigCommand>() {
  return ::com::synapticon::motioncontrolprotos::Config_ConfigCommand_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_motion_5fcontrol_5fprotos_2eproto__INCLUDED
