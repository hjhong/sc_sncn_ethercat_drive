// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: motion_control_protos.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "motion_control_protos.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace synapticon {
namespace motioncontrolprotos {

namespace {

const ::google::protobuf::Descriptor* MotionControl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MotionControl_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MotionControl_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Tuning_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tuning_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Tuning_TuningCommand_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Pid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pid_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Pid_PidCommand_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Profile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Profile_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Profile_ProfileCommand_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Play_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Play_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Play_PlayCommand_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Config_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Config_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Config_ConfigCommand_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_motion_5fcontrol_5fprotos_2eproto() {
  protobuf_AddDesc_motion_5fcontrol_5fprotos_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "motion_control_protos.proto");
  GOOGLE_CHECK(file != NULL);
  MotionControl_descriptor_ = file->message_type(0);
  static const int MotionControl_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionControl, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionControl, tuning_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionControl, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionControl, profile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionControl, play_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionControl, config_),
  };
  MotionControl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MotionControl_descriptor_,
      MotionControl::default_instance_,
      MotionControl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionControl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionControl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MotionControl));
  MotionControl_Type_descriptor_ = MotionControl_descriptor_->enum_type(0);
  Tuning_descriptor_ = file->message_type(1);
  static const int Tuning_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tuning, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tuning, tuning_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tuning, parameter_),
  };
  Tuning_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tuning_descriptor_,
      Tuning::default_instance_,
      Tuning_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tuning, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tuning, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tuning));
  Tuning_TuningCommand_descriptor_ = Tuning_descriptor_->enum_type(0);
  Pid_descriptor_ = file->message_type(2);
  static const int Pid_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pid, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pid, pid_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pid, parameter_),
  };
  Pid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pid_descriptor_,
      Pid::default_instance_,
      Pid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pid));
  Pid_PidCommand_descriptor_ = Pid_descriptor_->enum_type(0);
  Profile_descriptor_ = file->message_type(3);
  static const int Profile_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, profile_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, parameter_),
  };
  Profile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Profile_descriptor_,
      Profile::default_instance_,
      Profile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Profile));
  Profile_ProfileCommand_descriptor_ = Profile_descriptor_->enum_type(0);
  Play_descriptor_ = file->message_type(4);
  static const int Play_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Play, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Play, play_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Play, parameter_),
  };
  Play_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Play_descriptor_,
      Play::default_instance_,
      Play_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Play, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Play, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Play));
  Play_PlayCommand_descriptor_ = Play_descriptor_->enum_type(0);
  Config_descriptor_ = file->message_type(5);
  static const int Config_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, config_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, parameter_),
  };
  Config_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Config_descriptor_,
      Config::default_instance_,
      Config_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Config));
  Config_ConfigCommand_descriptor_ = Config_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_motion_5fcontrol_5fprotos_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MotionControl_descriptor_, &MotionControl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tuning_descriptor_, &Tuning::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pid_descriptor_, &Pid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Profile_descriptor_, &Profile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Play_descriptor_, &Play::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Config_descriptor_, &Config::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_motion_5fcontrol_5fprotos_2eproto() {
  delete MotionControl::default_instance_;
  delete MotionControl_reflection_;
  delete Tuning::default_instance_;
  delete Tuning_reflection_;
  delete Pid::default_instance_;
  delete Pid_reflection_;
  delete Profile::default_instance_;
  delete Profile_reflection_;
  delete Play::default_instance_;
  delete Play_reflection_;
  delete Config::default_instance_;
  delete Config_reflection_;
}

void protobuf_AddDesc_motion_5fcontrol_5fprotos_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033motion_control_protos.proto\022\"com.synap"
    "ticon.motioncontrolprotos\"\271\003\n\rMotionCont"
    "rol\022D\n\004type\030\001 \002(\01626.com.synapticon.motio"
    "ncontrolprotos.MotionControl.Type\022:\n\006tun"
    "ing\030\002 \001(\0132*.com.synapticon.motioncontrol"
    "protos.Tuning\0224\n\003pid\030\003 \001(\0132\'.com.synapti"
    "con.motioncontrolprotos.Pid\022<\n\007profile\030\004"
    " \001(\0132+.com.synapticon.motioncontrolproto"
    "s.Profile\0226\n\004play\030\005 \001(\0132(.com.synapticon"
    ".motioncontrolprotos.Play\022:\n\006config\030\006 \001("
    "\0132*.com.synapticon.motioncontrolprotos.C"
    "onfig\">\n\004Type\022\n\n\006TUNING\020\000\022\007\n\003PID\020\001\022\013\n\007PR"
    "OFILE\020\002\022\010\n\004PLAY\020\003\022\n\n\006CONFIG\020\004\"\230\001\n\006Tuning"
    "\022\r\n\005index\030\001 \002(\005\022P\n\016tuning_command\030\002 \002(\0162"
    "8.com.synapticon.motioncontrolprotos.Tun"
    "ing.TuningCommand\022\021\n\tparameter\030\003 \001(\005\"\032\n\r"
    "TuningCommand\022\t\n\005TIMES\020\000\"\264\003\n\003Pid\022\r\n\005inde"
    "x\030\001 \002(\005\022G\n\013pid_command\030\002 \002(\01622.com.synap"
    "ticon.motioncontrolprotos.Pid.PidCommand"
    "\022\021\n\tparameter\030\003 \001(\005\"\301\002\n\nPidCommand\022\017\n\013PO"
    "SITION_KP\020\000\022\017\n\013POSITION_KI\020\001\022\017\n\013POSITION"
    "_KD\020\002\022\023\n\017POSITION_TARGET\020\003\022\035\n\031POSITION_P"
    "ARAMETER_VALUES\020\004\022\017\n\013VELOCITY_KP\020\005\022\017\n\013VE"
    "LOCITY_KI\020\006\022\017\n\013VELOCITY_KD\020\007\022\023\n\017VELOCITY"
    "_TARGET\020\010\022\035\n\031VELOCITY_PARAMETER_VALUES\020\t"
    "\022\r\n\tTORQUE_KP\020\n\022\r\n\tTORQUE_KI\020\013\022\r\n\tTORQUE"
    "_KD\020\014\022\021\n\rTORQUE_TARGET\020\r\022\033\n\027TORQUE_PARAM"
    "ETER_VALUES\020\016\022\010\n\004TIME\020\017\"\264\002\n\007Profile\022\r\n\005i"
    "ndex\030\001 \002(\005\022S\n\017profile_command\030\002 \002(\0162:.co"
    "m.synapticon.motioncontrolprotos.Profile"
    ".ProfileCommand\022\021\n\tparameter\030\003 \001(\005\"\261\001\n\016P"
    "rofileCommand\022\023\n\017POSITION_TARGET\020\000\022\023\n\017VE"
    "LOCITY_TARGET\020\001\022\021\n\rTORQUE_TARGET\020\002\022\020\n\014AC"
    "CELERATION\020\003\022\020\n\014DECELERATION\020\004\022\020\n\014TORQUE"
    "_SLOPE\020\005\022\014\n\010VELOCITY\020\006\022\010\n\004TIME\020\007\022\024\n\020PARA"
    "METER_VALUES\020\010\"\270\002\n\004Play\022\r\n\005index\030\001 \002(\005\022J"
    "\n\014play_command\030\002 \002(\01624.com.synapticon.mo"
    "tioncontrolprotos.Play.PlayCommand\022\021\n\tpa"
    "rameter\030\003 \001(\005\"\301\001\n\013PlayCommand\022\023\n\017POSITIO"
    "N_TARGET\020\000\022\021\n\rPOSITION_STOP\020\001\022\023\n\017VELOCIT"
    "Y_TARGET\020\002\022\021\n\rVELOCITY_STOP\020\003\022\021\n\rTORQUE_"
    "TARGET\020\004\022\017\n\013TORQUE_STOP\020\005\022\020\n\014PASSIVE_MOD"
    "E\020\006\022\017\n\013ACTIVE_MODE\020\007\022\033\n\027RESET_ABSOLUTE_P"
    "OSITION\020\010\"\327\n\n\006Config\022\r\n\005index\030\001 \002(\005\022P\n\016c"
    "onfig_command\030\002 \002(\01628.com.synapticon.mot"
    "ioncontrolprotos.Config.ConfigCommand\022\021\n"
    "\tparameter\030\003 \001(\005\"\330\t\n\rConfigCommand\022\023\n\017HA"
    "LL_POLE_PAIRS\020\000\022\030\n\024IE_SENSOR_RESOLUTION\020"
    "\001\022\021\n\rIE_INDEX_TYPE\020\002\022\026\n\022IE_SENSOR_POLARI"
    "TY\020\003\022\022\n\016IE_SIGNAL_TYPE\020\004\022\031\n\025BISS_MULTITU"
    "RN_LENGTH\020\005\022\035\n\031BISS_MULTITURN_RESOLUTION"
    "\020\006\022\032\n\026BISS_SINGLETURN_LENGTH\020\007\022\036\n\032BISS_S"
    "INGLETURN_RESOLUTION\020\010\022\026\n\022BISS_STATUS_LE"
    "NGTH\020\t\022\021\n\rBISS_CRC_POLY\020\n\022\023\n\017BISS_POLE_P"
    "AIRS\020\013\022\021\n\rBISS_POLARITY\020\014\022\027\n\023BISS_CLOCK_"
    "DIVIDEND\020\r\022\026\n\022BISS_CLOCK_DIVISOR\020\016\022\020\n\014BI"
    "SS_TIMEOUT\020\017\022\026\n\022BISS_VELOCITY_LOOP\020\020\022\022\n\016"
    "BISS_MAX_TICKS\020\021\022\032\n\026BISS_OFFSET_ELECTRIC"
    "AL\020\022\022\030\n\024AMS_FACTORY_SETTINGS\020\023\022\020\n\014AMS_PO"
    "LARITY\020\024\022\022\n\016AMS_HYSTERESIS\020\025\022\026\n\022AMS_NOIS"
    "E_SETTINGS\020\026\022\017\n\013AMS_UVW_ABI\020\027\022\026\n\022AMS_DYN"
    "_ANGLE_COMP\020\030\022\023\n\017AMS_DATA_SELECT\020\031\022\016\n\nAM"
    "S_PWM_ON\020\032\022\026\n\022AMS_ABI_RESOLUTION\020\033\022\027\n\023AM"
    "S_RESOLUTION_BITS\020\034\022\016\n\nAMS_OFFSET\020\035\022\022\n\016A"
    "MS_POLE_PAIRS\020\036\022\021\n\rAMS_MAX_TICKS\020\037\022\022\n\016AM"
    "S_CACHE_TIME\020 \022\025\n\021AMS_VELOCITY_LOOP\020!\022\016\n"
    "\nMOTOR_TYPE\020\"\022\020\n\014WINDING_TYPE\020#\022\026\n\022COMMU"
    "TATION_SENSOR\020$\022 \n\034COMMUTATION_OFFSET_CL"
    "OCKWISE\020%\022\'\n#COMMUTATION_OFFSET_COUNTERC"
    "LOCKWISE\020&\022\033\n\027COMMUTATION_LOOP_PERIOD\020\'\022"
    "\023\n\017FEEDBACK_SENSOR\020(\022 \n\034POSITION_CONTROL"
    "_LOOP_PERIOD\020)\022\017\n\013POSITION_KP\020*\022\017\n\013POSIT"
    "ION_KI\020+\022\017\n\013POSITION_KD\020,\022 \n\034VELOCITY_CO"
    "NTROL_LOOP_PERIOD\020-\022\017\n\013VELOCITY_KP\020.\022\017\n\013"
    "VELOCITY_KI\020/\022\017\n\013VELOCITY_KD\0200\022\036\n\032TORQUE"
    "_CONTROL_LOOP_PERIOD\0201\022\r\n\tTORQUE_KP\0202\022\r\n"
    "\tTORQUE_KI\0203\022\r\n\tTORQUE_KD\0204\022\024\n\020PARAMETER"
    "_VALUES\0205\022\010\n\004SAVE\0206B5\n3com.synapticon.so"
    "manetconnect.universalmotionmaster", 3154);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "motion_control_protos.proto", &protobuf_RegisterTypes);
  MotionControl::default_instance_ = new MotionControl();
  Tuning::default_instance_ = new Tuning();
  Pid::default_instance_ = new Pid();
  Profile::default_instance_ = new Profile();
  Play::default_instance_ = new Play();
  Config::default_instance_ = new Config();
  MotionControl::default_instance_->InitAsDefaultInstance();
  Tuning::default_instance_->InitAsDefaultInstance();
  Pid::default_instance_->InitAsDefaultInstance();
  Profile::default_instance_->InitAsDefaultInstance();
  Play::default_instance_->InitAsDefaultInstance();
  Config::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_motion_5fcontrol_5fprotos_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_motion_5fcontrol_5fprotos_2eproto {
  StaticDescriptorInitializer_motion_5fcontrol_5fprotos_2eproto() {
    protobuf_AddDesc_motion_5fcontrol_5fprotos_2eproto();
  }
} static_descriptor_initializer_motion_5fcontrol_5fprotos_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* MotionControl_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MotionControl_Type_descriptor_;
}
bool MotionControl_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MotionControl_Type MotionControl::TUNING;
const MotionControl_Type MotionControl::PID;
const MotionControl_Type MotionControl::PROFILE;
const MotionControl_Type MotionControl::PLAY;
const MotionControl_Type MotionControl::CONFIG;
const MotionControl_Type MotionControl::Type_MIN;
const MotionControl_Type MotionControl::Type_MAX;
const int MotionControl::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MotionControl::kTypeFieldNumber;
const int MotionControl::kTuningFieldNumber;
const int MotionControl::kPidFieldNumber;
const int MotionControl::kProfileFieldNumber;
const int MotionControl::kPlayFieldNumber;
const int MotionControl::kConfigFieldNumber;
#endif  // !_MSC_VER

MotionControl::MotionControl()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.synapticon.motioncontrolprotos.MotionControl)
}

void MotionControl::InitAsDefaultInstance() {
  tuning_ = const_cast< ::com::synapticon::motioncontrolprotos::Tuning*>(&::com::synapticon::motioncontrolprotos::Tuning::default_instance());
  pid_ = const_cast< ::com::synapticon::motioncontrolprotos::Pid*>(&::com::synapticon::motioncontrolprotos::Pid::default_instance());
  profile_ = const_cast< ::com::synapticon::motioncontrolprotos::Profile*>(&::com::synapticon::motioncontrolprotos::Profile::default_instance());
  play_ = const_cast< ::com::synapticon::motioncontrolprotos::Play*>(&::com::synapticon::motioncontrolprotos::Play::default_instance());
  config_ = const_cast< ::com::synapticon::motioncontrolprotos::Config*>(&::com::synapticon::motioncontrolprotos::Config::default_instance());
}

MotionControl::MotionControl(const MotionControl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.synapticon.motioncontrolprotos.MotionControl)
}

void MotionControl::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  tuning_ = NULL;
  pid_ = NULL;
  profile_ = NULL;
  play_ = NULL;
  config_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MotionControl::~MotionControl() {
  // @@protoc_insertion_point(destructor:com.synapticon.motioncontrolprotos.MotionControl)
  SharedDtor();
}

void MotionControl::SharedDtor() {
  if (this != default_instance_) {
    delete tuning_;
    delete pid_;
    delete profile_;
    delete play_;
    delete config_;
  }
}

void MotionControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MotionControl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MotionControl_descriptor_;
}

const MotionControl& MotionControl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_motion_5fcontrol_5fprotos_2eproto();
  return *default_instance_;
}

MotionControl* MotionControl::default_instance_ = NULL;

MotionControl* MotionControl::New() const {
  return new MotionControl;
}

void MotionControl::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    type_ = 0;
    if (has_tuning()) {
      if (tuning_ != NULL) tuning_->::com::synapticon::motioncontrolprotos::Tuning::Clear();
    }
    if (has_pid()) {
      if (pid_ != NULL) pid_->::com::synapticon::motioncontrolprotos::Pid::Clear();
    }
    if (has_profile()) {
      if (profile_ != NULL) profile_->::com::synapticon::motioncontrolprotos::Profile::Clear();
    }
    if (has_play()) {
      if (play_ != NULL) play_->::com::synapticon::motioncontrolprotos::Play::Clear();
    }
    if (has_config()) {
      if (config_ != NULL) config_->::com::synapticon::motioncontrolprotos::Config::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MotionControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.synapticon.motioncontrolprotos.MotionControl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.synapticon.motioncontrolprotos.MotionControl.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::synapticon::motioncontrolprotos::MotionControl_Type_IsValid(value)) {
            set_type(static_cast< ::com::synapticon::motioncontrolprotos::MotionControl_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tuning;
        break;
      }

      // optional .com.synapticon.motioncontrolprotos.Tuning tuning = 2;
      case 2: {
        if (tag == 18) {
         parse_tuning:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tuning()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pid;
        break;
      }

      // optional .com.synapticon.motioncontrolprotos.Pid pid = 3;
      case 3: {
        if (tag == 26) {
         parse_pid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_profile;
        break;
      }

      // optional .com.synapticon.motioncontrolprotos.Profile profile = 4;
      case 4: {
        if (tag == 34) {
         parse_profile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_profile()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_play;
        break;
      }

      // optional .com.synapticon.motioncontrolprotos.Play play = 5;
      case 5: {
        if (tag == 42) {
         parse_play:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_play()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_config;
        break;
      }

      // optional .com.synapticon.motioncontrolprotos.Config config = 6;
      case 6: {
        if (tag == 50) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.synapticon.motioncontrolprotos.MotionControl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.synapticon.motioncontrolprotos.MotionControl)
  return false;
#undef DO_
}

void MotionControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.synapticon.motioncontrolprotos.MotionControl)
  // required .com.synapticon.motioncontrolprotos.MotionControl.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .com.synapticon.motioncontrolprotos.Tuning tuning = 2;
  if (has_tuning()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tuning(), output);
  }

  // optional .com.synapticon.motioncontrolprotos.Pid pid = 3;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pid(), output);
  }

  // optional .com.synapticon.motioncontrolprotos.Profile profile = 4;
  if (has_profile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->profile(), output);
  }

  // optional .com.synapticon.motioncontrolprotos.Play play = 5;
  if (has_play()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->play(), output);
  }

  // optional .com.synapticon.motioncontrolprotos.Config config = 6;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->config(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.synapticon.motioncontrolprotos.MotionControl)
}

::google::protobuf::uint8* MotionControl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.synapticon.motioncontrolprotos.MotionControl)
  // required .com.synapticon.motioncontrolprotos.MotionControl.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .com.synapticon.motioncontrolprotos.Tuning tuning = 2;
  if (has_tuning()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tuning(), target);
  }

  // optional .com.synapticon.motioncontrolprotos.Pid pid = 3;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pid(), target);
  }

  // optional .com.synapticon.motioncontrolprotos.Profile profile = 4;
  if (has_profile()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->profile(), target);
  }

  // optional .com.synapticon.motioncontrolprotos.Play play = 5;
  if (has_play()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->play(), target);
  }

  // optional .com.synapticon.motioncontrolprotos.Config config = 6;
  if (has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->config(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.synapticon.motioncontrolprotos.MotionControl)
  return target;
}

int MotionControl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.synapticon.motioncontrolprotos.MotionControl.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .com.synapticon.motioncontrolprotos.Tuning tuning = 2;
    if (has_tuning()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tuning());
    }

    // optional .com.synapticon.motioncontrolprotos.Pid pid = 3;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pid());
    }

    // optional .com.synapticon.motioncontrolprotos.Profile profile = 4;
    if (has_profile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->profile());
    }

    // optional .com.synapticon.motioncontrolprotos.Play play = 5;
    if (has_play()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->play());
    }

    // optional .com.synapticon.motioncontrolprotos.Config config = 6;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->config());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MotionControl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MotionControl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MotionControl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MotionControl::MergeFrom(const MotionControl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_tuning()) {
      mutable_tuning()->::com::synapticon::motioncontrolprotos::Tuning::MergeFrom(from.tuning());
    }
    if (from.has_pid()) {
      mutable_pid()->::com::synapticon::motioncontrolprotos::Pid::MergeFrom(from.pid());
    }
    if (from.has_profile()) {
      mutable_profile()->::com::synapticon::motioncontrolprotos::Profile::MergeFrom(from.profile());
    }
    if (from.has_play()) {
      mutable_play()->::com::synapticon::motioncontrolprotos::Play::MergeFrom(from.play());
    }
    if (from.has_config()) {
      mutable_config()->::com::synapticon::motioncontrolprotos::Config::MergeFrom(from.config());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MotionControl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotionControl::CopyFrom(const MotionControl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionControl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_tuning()) {
    if (!this->tuning().IsInitialized()) return false;
  }
  if (has_pid()) {
    if (!this->pid().IsInitialized()) return false;
  }
  if (has_profile()) {
    if (!this->profile().IsInitialized()) return false;
  }
  if (has_play()) {
    if (!this->play().IsInitialized()) return false;
  }
  if (has_config()) {
    if (!this->config().IsInitialized()) return false;
  }
  return true;
}

void MotionControl::Swap(MotionControl* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(tuning_, other->tuning_);
    std::swap(pid_, other->pid_);
    std::swap(profile_, other->profile_);
    std::swap(play_, other->play_);
    std::swap(config_, other->config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MotionControl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MotionControl_descriptor_;
  metadata.reflection = MotionControl_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Tuning_TuningCommand_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tuning_TuningCommand_descriptor_;
}
bool Tuning_TuningCommand_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Tuning_TuningCommand Tuning::TIMES;
const Tuning_TuningCommand Tuning::TuningCommand_MIN;
const Tuning_TuningCommand Tuning::TuningCommand_MAX;
const int Tuning::TuningCommand_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Tuning::kIndexFieldNumber;
const int Tuning::kTuningCommandFieldNumber;
const int Tuning::kParameterFieldNumber;
#endif  // !_MSC_VER

Tuning::Tuning()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.synapticon.motioncontrolprotos.Tuning)
}

void Tuning::InitAsDefaultInstance() {
}

Tuning::Tuning(const Tuning& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.synapticon.motioncontrolprotos.Tuning)
}

void Tuning::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  tuning_command_ = 0;
  parameter_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tuning::~Tuning() {
  // @@protoc_insertion_point(destructor:com.synapticon.motioncontrolprotos.Tuning)
  SharedDtor();
}

void Tuning::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Tuning::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tuning::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tuning_descriptor_;
}

const Tuning& Tuning::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_motion_5fcontrol_5fprotos_2eproto();
  return *default_instance_;
}

Tuning* Tuning::default_instance_ = NULL;

Tuning* Tuning::New() const {
  return new Tuning;
}

void Tuning::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Tuning*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(index_, parameter_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tuning::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.synapticon.motioncontrolprotos.Tuning)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tuning_command;
        break;
      }

      // required .com.synapticon.motioncontrolprotos.Tuning.TuningCommand tuning_command = 2;
      case 2: {
        if (tag == 16) {
         parse_tuning_command:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::synapticon::motioncontrolprotos::Tuning_TuningCommand_IsValid(value)) {
            set_tuning_command(static_cast< ::com::synapticon::motioncontrolprotos::Tuning_TuningCommand >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_parameter;
        break;
      }

      // optional int32 parameter = 3;
      case 3: {
        if (tag == 24) {
         parse_parameter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parameter_)));
          set_has_parameter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.synapticon.motioncontrolprotos.Tuning)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.synapticon.motioncontrolprotos.Tuning)
  return false;
#undef DO_
}

void Tuning::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.synapticon.motioncontrolprotos.Tuning)
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required .com.synapticon.motioncontrolprotos.Tuning.TuningCommand tuning_command = 2;
  if (has_tuning_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->tuning_command(), output);
  }

  // optional int32 parameter = 3;
  if (has_parameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->parameter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.synapticon.motioncontrolprotos.Tuning)
}

::google::protobuf::uint8* Tuning::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.synapticon.motioncontrolprotos.Tuning)
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required .com.synapticon.motioncontrolprotos.Tuning.TuningCommand tuning_command = 2;
  if (has_tuning_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->tuning_command(), target);
  }

  // optional int32 parameter = 3;
  if (has_parameter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->parameter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.synapticon.motioncontrolprotos.Tuning)
  return target;
}

int Tuning::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required .com.synapticon.motioncontrolprotos.Tuning.TuningCommand tuning_command = 2;
    if (has_tuning_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tuning_command());
    }

    // optional int32 parameter = 3;
    if (has_parameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parameter());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tuning::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tuning* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tuning*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tuning::MergeFrom(const Tuning& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_tuning_command()) {
      set_tuning_command(from.tuning_command());
    }
    if (from.has_parameter()) {
      set_parameter(from.parameter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tuning::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tuning::CopyFrom(const Tuning& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tuning::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Tuning::Swap(Tuning* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(tuning_command_, other->tuning_command_);
    std::swap(parameter_, other->parameter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tuning::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tuning_descriptor_;
  metadata.reflection = Tuning_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Pid_PidCommand_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pid_PidCommand_descriptor_;
}
bool Pid_PidCommand_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Pid_PidCommand Pid::POSITION_KP;
const Pid_PidCommand Pid::POSITION_KI;
const Pid_PidCommand Pid::POSITION_KD;
const Pid_PidCommand Pid::POSITION_TARGET;
const Pid_PidCommand Pid::POSITION_PARAMETER_VALUES;
const Pid_PidCommand Pid::VELOCITY_KP;
const Pid_PidCommand Pid::VELOCITY_KI;
const Pid_PidCommand Pid::VELOCITY_KD;
const Pid_PidCommand Pid::VELOCITY_TARGET;
const Pid_PidCommand Pid::VELOCITY_PARAMETER_VALUES;
const Pid_PidCommand Pid::TORQUE_KP;
const Pid_PidCommand Pid::TORQUE_KI;
const Pid_PidCommand Pid::TORQUE_KD;
const Pid_PidCommand Pid::TORQUE_TARGET;
const Pid_PidCommand Pid::TORQUE_PARAMETER_VALUES;
const Pid_PidCommand Pid::TIME;
const Pid_PidCommand Pid::PidCommand_MIN;
const Pid_PidCommand Pid::PidCommand_MAX;
const int Pid::PidCommand_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Pid::kIndexFieldNumber;
const int Pid::kPidCommandFieldNumber;
const int Pid::kParameterFieldNumber;
#endif  // !_MSC_VER

Pid::Pid()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.synapticon.motioncontrolprotos.Pid)
}

void Pid::InitAsDefaultInstance() {
}

Pid::Pid(const Pid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.synapticon.motioncontrolprotos.Pid)
}

void Pid::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  pid_command_ = 0;
  parameter_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pid::~Pid() {
  // @@protoc_insertion_point(destructor:com.synapticon.motioncontrolprotos.Pid)
  SharedDtor();
}

void Pid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Pid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pid_descriptor_;
}

const Pid& Pid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_motion_5fcontrol_5fprotos_2eproto();
  return *default_instance_;
}

Pid* Pid::default_instance_ = NULL;

Pid* Pid::New() const {
  return new Pid;
}

void Pid::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Pid*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(index_, parameter_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.synapticon.motioncontrolprotos.Pid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pid_command;
        break;
      }

      // required .com.synapticon.motioncontrolprotos.Pid.PidCommand pid_command = 2;
      case 2: {
        if (tag == 16) {
         parse_pid_command:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::synapticon::motioncontrolprotos::Pid_PidCommand_IsValid(value)) {
            set_pid_command(static_cast< ::com::synapticon::motioncontrolprotos::Pid_PidCommand >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_parameter;
        break;
      }

      // optional int32 parameter = 3;
      case 3: {
        if (tag == 24) {
         parse_parameter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parameter_)));
          set_has_parameter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.synapticon.motioncontrolprotos.Pid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.synapticon.motioncontrolprotos.Pid)
  return false;
#undef DO_
}

void Pid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.synapticon.motioncontrolprotos.Pid)
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required .com.synapticon.motioncontrolprotos.Pid.PidCommand pid_command = 2;
  if (has_pid_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->pid_command(), output);
  }

  // optional int32 parameter = 3;
  if (has_parameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->parameter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.synapticon.motioncontrolprotos.Pid)
}

::google::protobuf::uint8* Pid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.synapticon.motioncontrolprotos.Pid)
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required .com.synapticon.motioncontrolprotos.Pid.PidCommand pid_command = 2;
  if (has_pid_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->pid_command(), target);
  }

  // optional int32 parameter = 3;
  if (has_parameter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->parameter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.synapticon.motioncontrolprotos.Pid)
  return target;
}

int Pid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required .com.synapticon.motioncontrolprotos.Pid.PidCommand pid_command = 2;
    if (has_pid_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pid_command());
    }

    // optional int32 parameter = 3;
    if (has_parameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parameter());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pid::MergeFrom(const Pid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_pid_command()) {
      set_pid_command(from.pid_command());
    }
    if (from.has_parameter()) {
      set_parameter(from.parameter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pid::CopyFrom(const Pid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Pid::Swap(Pid* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(pid_command_, other->pid_command_);
    std::swap(parameter_, other->parameter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pid_descriptor_;
  metadata.reflection = Pid_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Profile_ProfileCommand_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Profile_ProfileCommand_descriptor_;
}
bool Profile_ProfileCommand_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Profile_ProfileCommand Profile::POSITION_TARGET;
const Profile_ProfileCommand Profile::VELOCITY_TARGET;
const Profile_ProfileCommand Profile::TORQUE_TARGET;
const Profile_ProfileCommand Profile::ACCELERATION;
const Profile_ProfileCommand Profile::DECELERATION;
const Profile_ProfileCommand Profile::TORQUE_SLOPE;
const Profile_ProfileCommand Profile::VELOCITY;
const Profile_ProfileCommand Profile::TIME;
const Profile_ProfileCommand Profile::PARAMETER_VALUES;
const Profile_ProfileCommand Profile::ProfileCommand_MIN;
const Profile_ProfileCommand Profile::ProfileCommand_MAX;
const int Profile::ProfileCommand_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Profile::kIndexFieldNumber;
const int Profile::kProfileCommandFieldNumber;
const int Profile::kParameterFieldNumber;
#endif  // !_MSC_VER

Profile::Profile()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.synapticon.motioncontrolprotos.Profile)
}

void Profile::InitAsDefaultInstance() {
}

Profile::Profile(const Profile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.synapticon.motioncontrolprotos.Profile)
}

void Profile::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  profile_command_ = 0;
  parameter_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Profile::~Profile() {
  // @@protoc_insertion_point(destructor:com.synapticon.motioncontrolprotos.Profile)
  SharedDtor();
}

void Profile::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Profile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Profile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Profile_descriptor_;
}

const Profile& Profile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_motion_5fcontrol_5fprotos_2eproto();
  return *default_instance_;
}

Profile* Profile::default_instance_ = NULL;

Profile* Profile::New() const {
  return new Profile;
}

void Profile::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Profile*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(index_, parameter_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Profile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.synapticon.motioncontrolprotos.Profile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_profile_command;
        break;
      }

      // required .com.synapticon.motioncontrolprotos.Profile.ProfileCommand profile_command = 2;
      case 2: {
        if (tag == 16) {
         parse_profile_command:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::synapticon::motioncontrolprotos::Profile_ProfileCommand_IsValid(value)) {
            set_profile_command(static_cast< ::com::synapticon::motioncontrolprotos::Profile_ProfileCommand >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_parameter;
        break;
      }

      // optional int32 parameter = 3;
      case 3: {
        if (tag == 24) {
         parse_parameter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parameter_)));
          set_has_parameter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.synapticon.motioncontrolprotos.Profile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.synapticon.motioncontrolprotos.Profile)
  return false;
#undef DO_
}

void Profile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.synapticon.motioncontrolprotos.Profile)
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required .com.synapticon.motioncontrolprotos.Profile.ProfileCommand profile_command = 2;
  if (has_profile_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->profile_command(), output);
  }

  // optional int32 parameter = 3;
  if (has_parameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->parameter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.synapticon.motioncontrolprotos.Profile)
}

::google::protobuf::uint8* Profile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.synapticon.motioncontrolprotos.Profile)
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required .com.synapticon.motioncontrolprotos.Profile.ProfileCommand profile_command = 2;
  if (has_profile_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->profile_command(), target);
  }

  // optional int32 parameter = 3;
  if (has_parameter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->parameter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.synapticon.motioncontrolprotos.Profile)
  return target;
}

int Profile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required .com.synapticon.motioncontrolprotos.Profile.ProfileCommand profile_command = 2;
    if (has_profile_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->profile_command());
    }

    // optional int32 parameter = 3;
    if (has_parameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parameter());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Profile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Profile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Profile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Profile::MergeFrom(const Profile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_profile_command()) {
      set_profile_command(from.profile_command());
    }
    if (from.has_parameter()) {
      set_parameter(from.parameter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Profile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Profile::CopyFrom(const Profile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Profile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Profile::Swap(Profile* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(profile_command_, other->profile_command_);
    std::swap(parameter_, other->parameter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Profile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Profile_descriptor_;
  metadata.reflection = Profile_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Play_PlayCommand_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Play_PlayCommand_descriptor_;
}
bool Play_PlayCommand_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Play_PlayCommand Play::POSITION_TARGET;
const Play_PlayCommand Play::POSITION_STOP;
const Play_PlayCommand Play::VELOCITY_TARGET;
const Play_PlayCommand Play::VELOCITY_STOP;
const Play_PlayCommand Play::TORQUE_TARGET;
const Play_PlayCommand Play::TORQUE_STOP;
const Play_PlayCommand Play::PASSIVE_MODE;
const Play_PlayCommand Play::ACTIVE_MODE;
const Play_PlayCommand Play::RESET_ABSOLUTE_POSITION;
const Play_PlayCommand Play::PlayCommand_MIN;
const Play_PlayCommand Play::PlayCommand_MAX;
const int Play::PlayCommand_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Play::kIndexFieldNumber;
const int Play::kPlayCommandFieldNumber;
const int Play::kParameterFieldNumber;
#endif  // !_MSC_VER

Play::Play()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.synapticon.motioncontrolprotos.Play)
}

void Play::InitAsDefaultInstance() {
}

Play::Play(const Play& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.synapticon.motioncontrolprotos.Play)
}

void Play::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  play_command_ = 0;
  parameter_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Play::~Play() {
  // @@protoc_insertion_point(destructor:com.synapticon.motioncontrolprotos.Play)
  SharedDtor();
}

void Play::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Play::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Play::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Play_descriptor_;
}

const Play& Play::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_motion_5fcontrol_5fprotos_2eproto();
  return *default_instance_;
}

Play* Play::default_instance_ = NULL;

Play* Play::New() const {
  return new Play;
}

void Play::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Play*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(index_, parameter_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Play::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.synapticon.motioncontrolprotos.Play)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_play_command;
        break;
      }

      // required .com.synapticon.motioncontrolprotos.Play.PlayCommand play_command = 2;
      case 2: {
        if (tag == 16) {
         parse_play_command:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::synapticon::motioncontrolprotos::Play_PlayCommand_IsValid(value)) {
            set_play_command(static_cast< ::com::synapticon::motioncontrolprotos::Play_PlayCommand >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_parameter;
        break;
      }

      // optional int32 parameter = 3;
      case 3: {
        if (tag == 24) {
         parse_parameter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parameter_)));
          set_has_parameter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.synapticon.motioncontrolprotos.Play)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.synapticon.motioncontrolprotos.Play)
  return false;
#undef DO_
}

void Play::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.synapticon.motioncontrolprotos.Play)
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required .com.synapticon.motioncontrolprotos.Play.PlayCommand play_command = 2;
  if (has_play_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->play_command(), output);
  }

  // optional int32 parameter = 3;
  if (has_parameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->parameter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.synapticon.motioncontrolprotos.Play)
}

::google::protobuf::uint8* Play::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.synapticon.motioncontrolprotos.Play)
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required .com.synapticon.motioncontrolprotos.Play.PlayCommand play_command = 2;
  if (has_play_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->play_command(), target);
  }

  // optional int32 parameter = 3;
  if (has_parameter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->parameter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.synapticon.motioncontrolprotos.Play)
  return target;
}

int Play::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required .com.synapticon.motioncontrolprotos.Play.PlayCommand play_command = 2;
    if (has_play_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->play_command());
    }

    // optional int32 parameter = 3;
    if (has_parameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parameter());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Play::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Play* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Play*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Play::MergeFrom(const Play& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_play_command()) {
      set_play_command(from.play_command());
    }
    if (from.has_parameter()) {
      set_parameter(from.parameter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Play::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Play::CopyFrom(const Play& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Play::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Play::Swap(Play* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(play_command_, other->play_command_);
    std::swap(parameter_, other->parameter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Play::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Play_descriptor_;
  metadata.reflection = Play_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Config_ConfigCommand_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_ConfigCommand_descriptor_;
}
bool Config_ConfigCommand_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Config_ConfigCommand Config::HALL_POLE_PAIRS;
const Config_ConfigCommand Config::IE_SENSOR_RESOLUTION;
const Config_ConfigCommand Config::IE_INDEX_TYPE;
const Config_ConfigCommand Config::IE_SENSOR_POLARITY;
const Config_ConfigCommand Config::IE_SIGNAL_TYPE;
const Config_ConfigCommand Config::BISS_MULTITURN_LENGTH;
const Config_ConfigCommand Config::BISS_MULTITURN_RESOLUTION;
const Config_ConfigCommand Config::BISS_SINGLETURN_LENGTH;
const Config_ConfigCommand Config::BISS_SINGLETURN_RESOLUTION;
const Config_ConfigCommand Config::BISS_STATUS_LENGTH;
const Config_ConfigCommand Config::BISS_CRC_POLY;
const Config_ConfigCommand Config::BISS_POLE_PAIRS;
const Config_ConfigCommand Config::BISS_POLARITY;
const Config_ConfigCommand Config::BISS_CLOCK_DIVIDEND;
const Config_ConfigCommand Config::BISS_CLOCK_DIVISOR;
const Config_ConfigCommand Config::BISS_TIMEOUT;
const Config_ConfigCommand Config::BISS_VELOCITY_LOOP;
const Config_ConfigCommand Config::BISS_MAX_TICKS;
const Config_ConfigCommand Config::BISS_OFFSET_ELECTRICAL;
const Config_ConfigCommand Config::AMS_FACTORY_SETTINGS;
const Config_ConfigCommand Config::AMS_POLARITY;
const Config_ConfigCommand Config::AMS_HYSTERESIS;
const Config_ConfigCommand Config::AMS_NOISE_SETTINGS;
const Config_ConfigCommand Config::AMS_UVW_ABI;
const Config_ConfigCommand Config::AMS_DYN_ANGLE_COMP;
const Config_ConfigCommand Config::AMS_DATA_SELECT;
const Config_ConfigCommand Config::AMS_PWM_ON;
const Config_ConfigCommand Config::AMS_ABI_RESOLUTION;
const Config_ConfigCommand Config::AMS_RESOLUTION_BITS;
const Config_ConfigCommand Config::AMS_OFFSET;
const Config_ConfigCommand Config::AMS_POLE_PAIRS;
const Config_ConfigCommand Config::AMS_MAX_TICKS;
const Config_ConfigCommand Config::AMS_CACHE_TIME;
const Config_ConfigCommand Config::AMS_VELOCITY_LOOP;
const Config_ConfigCommand Config::MOTOR_TYPE;
const Config_ConfigCommand Config::WINDING_TYPE;
const Config_ConfigCommand Config::COMMUTATION_SENSOR;
const Config_ConfigCommand Config::COMMUTATION_OFFSET_CLOCKWISE;
const Config_ConfigCommand Config::COMMUTATION_OFFSET_COUNTERCLOCKWISE;
const Config_ConfigCommand Config::COMMUTATION_LOOP_PERIOD;
const Config_ConfigCommand Config::FEEDBACK_SENSOR;
const Config_ConfigCommand Config::POSITION_CONTROL_LOOP_PERIOD;
const Config_ConfigCommand Config::POSITION_KP;
const Config_ConfigCommand Config::POSITION_KI;
const Config_ConfigCommand Config::POSITION_KD;
const Config_ConfigCommand Config::VELOCITY_CONTROL_LOOP_PERIOD;
const Config_ConfigCommand Config::VELOCITY_KP;
const Config_ConfigCommand Config::VELOCITY_KI;
const Config_ConfigCommand Config::VELOCITY_KD;
const Config_ConfigCommand Config::TORQUE_CONTROL_LOOP_PERIOD;
const Config_ConfigCommand Config::TORQUE_KP;
const Config_ConfigCommand Config::TORQUE_KI;
const Config_ConfigCommand Config::TORQUE_KD;
const Config_ConfigCommand Config::PARAMETER_VALUES;
const Config_ConfigCommand Config::SAVE;
const Config_ConfigCommand Config::ConfigCommand_MIN;
const Config_ConfigCommand Config::ConfigCommand_MAX;
const int Config::ConfigCommand_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Config::kIndexFieldNumber;
const int Config::kConfigCommandFieldNumber;
const int Config::kParameterFieldNumber;
#endif  // !_MSC_VER

Config::Config()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.synapticon.motioncontrolprotos.Config)
}

void Config::InitAsDefaultInstance() {
}

Config::Config(const Config& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.synapticon.motioncontrolprotos.Config)
}

void Config::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  config_command_ = 0;
  parameter_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:com.synapticon.motioncontrolprotos.Config)
  SharedDtor();
}

void Config::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Config::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_descriptor_;
}

const Config& Config::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_motion_5fcontrol_5fprotos_2eproto();
  return *default_instance_;
}

Config* Config::default_instance_ = NULL;

Config* Config::New() const {
  return new Config;
}

void Config::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Config*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(index_, parameter_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.synapticon.motioncontrolprotos.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_config_command;
        break;
      }

      // required .com.synapticon.motioncontrolprotos.Config.ConfigCommand config_command = 2;
      case 2: {
        if (tag == 16) {
         parse_config_command:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::synapticon::motioncontrolprotos::Config_ConfigCommand_IsValid(value)) {
            set_config_command(static_cast< ::com::synapticon::motioncontrolprotos::Config_ConfigCommand >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_parameter;
        break;
      }

      // optional int32 parameter = 3;
      case 3: {
        if (tag == 24) {
         parse_parameter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parameter_)));
          set_has_parameter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.synapticon.motioncontrolprotos.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.synapticon.motioncontrolprotos.Config)
  return false;
#undef DO_
}

void Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.synapticon.motioncontrolprotos.Config)
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required .com.synapticon.motioncontrolprotos.Config.ConfigCommand config_command = 2;
  if (has_config_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->config_command(), output);
  }

  // optional int32 parameter = 3;
  if (has_parameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->parameter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.synapticon.motioncontrolprotos.Config)
}

::google::protobuf::uint8* Config::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.synapticon.motioncontrolprotos.Config)
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required .com.synapticon.motioncontrolprotos.Config.ConfigCommand config_command = 2;
  if (has_config_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->config_command(), target);
  }

  // optional int32 parameter = 3;
  if (has_parameter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->parameter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.synapticon.motioncontrolprotos.Config)
  return target;
}

int Config::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required .com.synapticon.motioncontrolprotos.Config.ConfigCommand config_command = 2;
    if (has_config_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->config_command());
    }

    // optional int32 parameter = 3;
    if (has_parameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parameter());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Config::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Config* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Config*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Config::MergeFrom(const Config& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_config_command()) {
      set_config_command(from.config_command());
    }
    if (from.has_parameter()) {
      set_parameter(from.parameter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Config::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config::CopyFrom(const Config& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Config::Swap(Config* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(config_command_, other->config_command_);
    std::swap(parameter_, other->parameter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Config::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Config_descriptor_;
  metadata.reflection = Config_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace motioncontrolprotos
}  // namespace synapticon
}  // namespace com

// @@protoc_insertion_point(global_scope)
